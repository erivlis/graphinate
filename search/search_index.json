{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Graphinate. Data to Graphs.","text":""},{"location":"acknowledge/","title":"Acknowledgements","text":""},{"location":"acknowledge/#dependencies","title":"Dependencies","text":""},{"location":"acknowledge/#python","title":"Python","text":""},{"location":"acknowledge/#javascript-and-html","title":"Javascript and HTML","text":""},{"location":"acknowledge/#dev-tools","title":"Dev Tools","text":""},{"location":"acknowledge/#ide","title":"IDE","text":""},{"location":"intro/","title":"Introduction","text":""},{"location":"intro/#why","title":"Why?","text":""},{"location":"intro/#why-graphs","title":"Why Graphs?","text":"<p>A Graph is a powerful data structure, that can be used to model a wide range of problems. Graphs are used in many fields, such as computer science, mathematics, physics, biology, social sciences and more.</p>"},{"location":"intro/#why-graphinate","title":"Why Graphinate?","text":"<p>Usually the creation of a Graph is a tedious and error-prone process. It requires a lot of boilerplate code to transform data into a Graph. This process can be automated and simplified. This is where Graphinate comes in.</p>"},{"location":"intro/#what","title":"What?","text":""},{"location":"intro/#what-is-a-graph","title":"What is a Graph?","text":"<p>Quote</p> <p>\u201cIn a mathematician's terminology, a graph is a collection of points and lines connecting some (possibly empty) subset of them. The points of a graph are most commonly known as graph vertices, but may also be called nodes or points. Similarly, the lines connecting the vertices of a graph are most commonly known as graph edges, but may also be called arcs or lines.\u201d</p> <p>\u2014 https://mathworld.wolfram.com/Graph.html</p>"},{"location":"intro/#what-is-data","title":"What is Data?","text":"<p>Quote</p> <p>\u201c...data is a collection of discrete or continuous values that convey information, describing the quantity, quality, fact, statistics, other basic units of meaning, or simply sequences of symbols that may be further interpreted formally.\u201d</p> <p>\u2014 https://en.wikipedia.org/wiki/Data</p>"},{"location":"intro/#what-is-graphinate","title":"What is Graphinate?","text":"<p>Graphinate is a python library that helps generate and populate Graph Data Structures from Data Sources.</p> <p>It can help create an efficient retrieval pipeline from a given data source, while also enabling the developer to map data payloads and hierarchies to a Graph.</p> <p>There are several modes of building and rendering to facilitate examination of the Graph and its content.</p> <p>Graphinate uses and is built upon the excellent NetworkX.</p>"},{"location":"intro/#how","title":"How?","text":""},{"location":"intro/#a-graph-as-a-data-structure","title":"A Graph as a Data Structure","text":"<p>A Graph can be a useful data structure. It is, perhaps, the simplest data structure, that is a \"bit more\" than just a simple collection of \"things\". As such, it can be used to model any data source that has structure.</p>"},{"location":"intro/#graph-elements","title":"Graph Elements","text":"<p>A Graph consists of two types of elements:</p>"},{"location":"intro/#nodes","title":"Nodes","text":"<p>A Graph Node can be any Python Hashable object. Usually it will be a primitive type such as an integer or a string, in particular when the node in itself has no specific meaning.</p> <p>One can also add attributes to the node to describe additional information. This information can be anything. Often attributes are used to store scalar dimensions (e.g., weight, area, width, age, etc.) or stylistic information (e.g., color, size, shape, label, etc.).</p> <p>Nodes are usually visualized as circles or points.</p>"},{"location":"intro/#edges","title":"Edges","text":"<p>A Graph Edge is a pair of two node values. It can also have additional attributes in the same vain as a Graph Node.</p> <p>Edges are usually visualized as lines connecting two nodes.</p>"},{"location":"intro/#defining-a-graph","title":"Defining a Graph","text":"<p>One can define a Graph in two general ways:</p>"},{"location":"intro/#edge-first","title":"Edge First","text":"<p>The most straightforward way to generate a Graph is to supply a list of edges. The simplest definition of an edge is a pair of two values. Each value represents a node (or vertex) in the graph. Attributes may be added to the edge definition to convey additional characteristics, such as weight, direction, etc.</p> <p>In this case, one defines the edges explicitly and the nodes implicitly.</p> <p>Such a graph is focused more on the relationships between nodes, or the structure of the graph, than on the nodes themselves.</p>"},{"location":"intro/#node-first","title":"Node First","text":"<p>Alternatively, one can first add nodes (vertices) to a graph without defining edges. Attributes may be added to the node definitions to convey additional characteristics. After that, edge definitions are added to generate the relationships between the nodes.</p> <p>In this case, both nodes and the edges are defined explicitly.</p> <p>Such a graph may have a focus primarily on the nodes, and then only if needed on the relationship between them.</p>"},{"location":"intro/#graphinate","title":"Graphinate","text":"<p>Graphinate helps to generate graphs from data sources (\"Hydrate\" a Graph Model from a Data Source.) It supports both Edge First and Node First creation scenarios.</p> <p>This is achieved the following way:</p>"},{"location":"intro/#source","title":"Source","text":"<p>First, it is required to represent the data sources, as an <code>Iterable</code> of items. It will be supply the data items that will be used to create the graph edges and/or nodes. It is recommended to use a <code>Generator</code>  as the items Iterable. This way, the data source can be lazily-loaded. Such an <code>Iterable</code> or <code>Generator</code> can be, anything from a simple list of dictionaries, to a complex database query.</p>"},{"location":"intro/#model","title":"Model","text":"<p>Graphinate introduces the concept of a <code>GraphModel</code>. A GraphModel embodies a set of rules which define how to use a data source item in creating a Graph element (i.e., either a node or an edges). The <code>GraphModel</code> registers the sources using <code>GraphModel.node</code> and <code>GraphModel.edge</code> decorators. These decorators define how to extract both mandatory and optional aspects of information, which then are used to generate each Graph element.</p>"},{"location":"intro/#builders","title":"Builders","text":"<p>A <code>GraphModel</code> can be used to generate an actual instance of a <code>GraphRepresentation</code>. Such a <code>GraphRepresentation</code> will contain the actual Graph data structure, populated with the data items obtained from the source. Graphinate provides several <code>GraphBuilder</code> classes that can be used to build the <code>GraphRepresentation</code> from a <code>GraphModel</code>. The actual nature of the <code>GraphRepresentation</code> will depend on the <code>GraphBuilder</code> used.</p>"},{"location":"intro/#renderers","title":"Renderers","text":"<p>Finally, we can render a builder's output <code>GraphRepresentation</code>. The Renderers chosen depends on the actual type of the <code>GraphRepresentaion</code> and the desired rendering output format. Graphinate provides several Renderer classes that can be used for different use cases such as visualizing, querying, reporting, etc.</p>"},{"location":"start/","title":"Quick Start","text":"<p>Graphinate is designed to be used as a library first and foremost. In addition, it has the following interfaces for ease of use: a CLI and a GraphQL API (using Strawberry GraphQL ).</p>"},{"location":"start/#install","title":"Install","text":"<p>Graphinate is available on PyPI:</p> <pre><code>pip install graphinate\n</code></pre> <p>To install with server support</p> <pre><code>pip install graphinate[server]\n</code></pre> <p>Graphinate officially supports Python &gt;= 3.10.</p>"},{"location":"start/#demo","title":"Demo","text":"<p>The following code snippet shows basic simple usage of Graphinate. It demonstrates how to wire a simple source function to a graph model, build graph representation of several types, and render them. You can check the Tutorial for an in-depth step-by-step walkthrough, and the Examples section for additional more complex use cases.</p> Octagonal Graph<pre><code>import graphinate\n\nN: int = 8\n\n# First Define a GraphModel instance.\n# It will be used to hold the graph definitions\ngraph_model: graphinate.GraphModel = graphinate.model(name=\"Octagonal Graph\")\n\n\n# Register in the Graph Model the edges' supplier generator function\n@graph_model.edge()\ndef edge():\n    for i in range(N):\n        yield {'source': i, 'target': i + 1}\n    yield {'source': N, 'target': 0}\n\n\n# Use the NetworkX Builder\nbuilder = graphinate.builders.NetworkxBuilder(graph_model)\n\n# build the NetworkX GraphRepresentation\n# the output in this case is a nx.Graph instance\ngraph = builder.build()\n\n# this supplied plot method uses matplotlib to display the graph\ngraphinate.matplotlib.plot(graph, with_edge_labels=True)\n\n# or use the Mermaid Builder\nbuilder = graphinate.builders.MermaidBuilder(graph_model)\n\n# to create a Mermaid diagram\ndiagram: str = builder.build()\n\n# and get Markdown or single page HTML to display it\nmermaid_markdown: str = graphinate.mermaid.markdown(diagram)\nmermaid_html: str = graphinate.mermaid.html(diagram, title=graph_model.name)\n\n# or use the GraphQL Builder\nbuilder = graphinate.builders.GraphQLBuilder(graph_model)\n\n# to create a Strawberry GraphQL schema\nschema = builder.build()\n\n# and serve it using Uvicorn web server\ngraphinate.graphql.server(schema)\n</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This tutorial will guide you through the steps to create a Music Artists Graph. (It is based on the Music Artists example).</p>"},{"location":"tutorial/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, please ensure you have installed the following dependencies:</p> <ul> <li>Python 3.10 or above</li> <li><code>pip</code> (Python package installer)</li> <li>Required Python packages: <code>diskcache</code>, <code>musicbrainzngs</code>, <code>graphinate</code></li> </ul> <p>You can install the required packages using the following command:</p> <pre><code>pip install diskcache musicbrainzngs graphinate\n</code></pre>"},{"location":"tutorial/#step-1-initialize-musicbrainz","title":"Step 1: Initialize MusicBrainz","text":"<p>First, we need to initialize the MusicBrainz client with a user agent. This helps identify the application when making requests to the MusicBrainz API.</p> <pre><code>import musicbrainzngs\n\n\ndef initialize_musicbrainz():\n    musicbrainzngs.set_useragent(\n        \"MusicArtistGraph\",\n        \"0.1.0\",\n        \"https://github.com/erivlis/graphinate\"\n    )\n\n\ninitialize_musicbrainz()\n</code></pre>"},{"location":"tutorial/#step-2-set-up-caching","title":"Step 2: Set Up Caching","text":"<p>We will use <code>diskcache</code> to cache artist data to avoid redundant API calls. (A prefilled cache may be available in the GitHub repo).</p> <pre><code>import pathlib\nimport diskcache\n\n\ndef cache_dir():\n    current_script_path = pathlib.Path(__file__).resolve()\n    parent_dir = current_script_path.parent\n    return (parent_dir / 'cache').as_posix()\n\n\nartists_cache = diskcache.Cache(directory=cache_dir(), eviction_policy='none')\n</code></pre>"},{"location":"tutorial/#step-3-create-the-graph-model","title":"Step 3: Create the Graph Model","text":""},{"location":"tutorial/#step-31-import-required-modules","title":"Step 3.1: Import Required Modules","text":"<p>We need to import the necessary modules for creating the graph model.</p> <pre><code>import graphinate\nfrom time import sleep\nimport operator\n</code></pre>"},{"location":"tutorial/#step-32-define-the-music-graph-model-function","title":"Step 3.2: Define the Music Graph Model Function","text":"<p>We will create a function <code>music_graph_model</code> that takes an artist's name and a maximum depth of recursion. This function will be used to create a Graph Model.</p> <pre><code>def music_graph_model(name: str, max_depth: int = 0) -&gt; graphinate.GraphModel:\n    graph_model = graphinate.model(f\"{name.capitalize()} Graph\")\n</code></pre>"},{"location":"tutorial/#step-33-search-for-the-root-artist","title":"Step 3.3: Search for the Root Artist","text":"<p>We will search for the root artist using the MusicBrainz API.</p> <pre><code>    result = musicbrainzngs.search_artists(query=name, strict=True, artist=name)\nsleep(1)  # Sleep for 1 second to avoid rate limiting\nroot_artist = result.get('artist-list', [])[0] if result else None\n</code></pre>"},{"location":"tutorial/#step-34-define-the-artists-generator-function","title":"Step 3.4: Define the Artists Generator Function","text":"<p>We will define a generator function <code>artists</code> to yield parent and related artists recursively. We will retrieve the artist data from the cache if it exists, otherwise, we will fetch it from the MusicBrainz API. Then we will yield the parent and related artists. If the depth is less than the maximum depth, we will recursively yield artists for each related artist as a starting point.</p> <pre><code>    def artists(parent_artist, artist, depth):\n    artist_id = artist.get('id')\n    if artist_id not in artists_cache:\n        artists_cache[artist_id] = musicbrainzngs.get_artist_by_id(id=artist_id, includes=['artist-rels']).get('artist')\n        sleep(0.1)  # Sleep for 0.1 second to avoid rate limiting\n\n        artist = artists_cache.get(artist_id)\n\n        yield parent_artist, artist\n\n        if depth &lt; max_depth:\n            related_artist_ids = set()\n            for item in artist.get('artist-relation-list', []):\n                related_artist = item.get('artist')\n                related_artist_id = related_artist.get('id')\n                if related_artist_id not in related_artist_ids:\n                    related_artist_ids.add(related_artist_id)\n                    yield from artists(artist, related_artist, depth + 1)\n</code></pre>"},{"location":"tutorial/#step-35-define-the-artist-type-function","title":"Step 3.5: Define the Artist Type Function","text":"<p>We will define a function to get the type of an artist. We'll use it in the next step</p> <pre><code>    def artist_type(value):\n    return value.get('type', '_UNKNOWN_')\n</code></pre>"},{"location":"tutorial/#step-36-define-the-node-model","title":"Step 3.6: Define the Node Model","text":"<p>We will define the node model for the graph using the <code>node</code> decorator. Using the musicbrainz artist type as the node type, the artist ID as the node key, and the artist name as the label. The <code>Multiplicity.FIRST</code> option ensures that only the first occurrence of an artist is included in the graph.</p> <pre><code>    @graph_model.node(artist_type,\n                      key=operator.itemgetter('id'),\n                      label=operator.itemgetter('name'),\n                      multiplicity=graphinate.Multiplicity.FIRST)\ndef node():\n    yielded = set()\n    for a, b in artists(None, root_artist, 0):\n        if a and ((a_id := a.get('id')) not in yielded):\n            yielded.add(a_id)\n            yield a\n        if b and ((b_id := b.get('id')) not in yielded):\n            yielded.add(b_id)\n            yield b\n</code></pre>"},{"location":"tutorial/#step-37-define-the-edge-model","title":"Step 3.7: Define the Edge Model","text":"<p>We will define the edge model for the graph to represent relationships between artists.</p> <pre><code>    @graph_model.edge()\ndef edge():\n    for a, b in artists(None, root_artist, 0):\n        if a:\n            yield {'source': a.get('id'), 'target': b.get('id')}\n</code></pre>"},{"location":"tutorial/#step-38-return-the-graph-model","title":"Step 3.8: Return the Graph Model","text":"<p>Putting it all together and, Finally, return the created graph model.</p> <pre><code>import graphinate\nimport musicbrainzngs\nfrom time import sleep\nimport operator\nimport diskcache\nimport pathlib\n\n\ndef cache_dir():\n    current_script_path = pathlib.Path(__file__).resolve()\n    parent_dir = current_script_path.parent\n    return (parent_dir / 'cache').as_posix()\n\n\nartists_cache = diskcache.Cache(directory=cache_dir(), eviction_policy='none')\n\n\ndef music_graph_model(name: str, max_depth: int = 0):\n    graph_model = graphinate.model(f\"{name.capitalize()} Graph\")\n\n    result = musicbrainzngs.search_artists(query=name, strict=True, artist=name)\n    sleep(1)  # Sleep for 1 second to avoid rate limiting\n    root_artist = result.get('artist-list', [])[0] if result else None\n\n    def artists(parent_artist, artist, depth):\n        artist_id = artist.get('id')\n        if artist_id not in artists_cache:\n            artists_cache[artist_id] = musicbrainzngs.get_artist_by_id(id=artist_id, includes=['artist-rels']).get(\n                'artist')\n            sleep(0.1)  # Sleep for 0.1 second to avoid rate limiting\n\n        artist = artists_cache.get(artist_id)\n        yield parent_artist, artist\n\n        if depth &lt; max_depth:\n            related_artist_ids = set()\n            for item in artist.get('artist-relation-list', []):\n                related_artist = item.get('artist')\n                related_artist_id = related_artist.get('id')\n                if related_artist_id not in related_artist_ids:\n                    related_artist_ids.add(related_artist_id)\n                    yield from artists(artist, related_artist, depth + 1)\n\n    def artist_type(value):\n        return value.get('type', '_UNKNOWN_')\n\n    @graph_model.node(artist_type, key=operator.itemgetter('id'), label=operator.itemgetter('name'),\n                      multiplicity=graphinate.Multiplicity.FIRST)\n    def node():\n        yielded = set()\n        for a, b in artists(None, root_artist, 0):\n            if a and ((a_id := a.get('id')) not in yielded):\n                yielded.add(a_id)\n                yield a\n            if b and ((b_id := b.get('id')) not in yielded):\n                yielded.add(b_id)\n                yield b\n\n    @graph_model.edge()\n    def edge():\n        for a, b in artists(None, root_artist, 0):\n            if a:\n                yield {'source': a.get('id'), 'target': b.get('id')}\n\n    return graph_model\n</code></pre>"},{"location":"tutorial/#step-4-create-the-gui-for-artist-selection","title":"Step 4: Create the GUI for Artist Selection","text":""},{"location":"tutorial/#step-41-import-required-modules","title":"Step 4.1: Import Required Modules","text":"<p>We will use <code>tkinter</code> to create a simple GUI for selecting artists. Implemented before hand in the <code>gui.py</code> file located in the example folder.</p> <pre><code>from gui import ListboxChooser\n</code></pre>"},{"location":"tutorial/#step-42-define-the-artist-names","title":"Step 4.2: Define the Artist Names","text":"<p>We will define a list of artist names to be displayed in the listbox.</p> <pre><code>artist_names = [\n    'Alice in Chains', 'Beatles', 'Caravan', 'Charles Mingus', 'Dave Brubeck',\n    'Dave Douglas', 'David Bowie', 'Deep Purple', 'Dire Straits', 'Emerson, Lake &amp; Palmer',\n    'Foo Fighters', 'Frank Zappa', 'Genesis', 'Gentle Giant', 'Herbie Hancock',\n    'Jethro Tull', 'John Coltrane', 'John Scofield', 'John Zorn', 'Ken Vandermark',\n    'King Crimson', 'Led Zeppelin', 'Mahavishnu Orchestra', 'Miles Davis', 'Nirvana',\n    'Ornette Coleman', 'Paul McCartney', 'Pearl Jam', 'Pink Floyd', 'Police',\n    'Porcupine Tree', 'Radiohead', 'Red Hot Chili Peppers', 'Return to Forever', 'Rush',\n    'Smashing Pumpkins', 'Soft Machine', 'Soundgarden', 'Stone Temple Pilots', 'System of a Down',\n    'Thelonious Monk', 'Weather Report', 'Wings', 'Yes'\n]\n</code></pre>"},{"location":"tutorial/#step-43-create-the-listboxchooser-instance","title":"Step 4.3: Create the ListboxChooser Instance","text":"<p>We will create an instance of <code>ListboxChooser</code> and pass the artist names to it.</p> <pre><code>listbox_chooser = ListboxChooser('Choose Artist/s', {name: name for name in artist_names})\n</code></pre>"},{"location":"tutorial/#step-44-generate-the-graph-models","title":"Step 4.4: Generate the Graph Models","text":"<p>We will generate the GraphModel for the selected artists. First creating a GraphModel for each artist and then combining them into a single model. In this case, we will use the <code>reduce</code> function from the <code>functools</code> module to combine the models using the <code>operator.add</code> function. It leverages the GrapModel support of the + operation.</p> <pre><code>models = (music_graph_model(a, 2) for _, a in listbox_chooser.get_choices())\nmodel = reduce(operator.add, models)\n</code></pre>"},{"location":"tutorial/#step-45-materialize-the-graph","title":"Step 4.5: Materialize the Graph","text":"<p>Using the <code>GraphQLBuilder</code> we generate a GraphQL Schema (i.e. strawberry-graphql schema) and use the <code>graphql.server</code> function to create and run the GraphQL server.</p> <pre><code># Use the GraphQLBuilder Builder\nbuilder = graphinate.builders.GraphQLBuilder(graph_model)\n\n# build the strawberry-graphql schema\nschema = builder.build()\n\n# plot the graph using matplotlib\ngraphinate.graphql.server(schema)\n</code></pre>"},{"location":"tutorial/#step-46-putting-everything-together","title":"Step 4.6: Putting everything together","text":"<pre><code>if __name__ == '__main__':\n    from gui import ListboxChooser\n\n    artist_names = [\n        'Alice in Chains', 'Beatles', 'Caravan', 'Charles Mingus', 'Dave Brubeck',\n        'Dave Douglas', 'David Bowie', 'Deep Purple', 'Dire Straits', 'Emerson, Lake &amp; Palmer',\n        'Foo Fighters', 'Frank Zappa', 'Genesis', 'Gentle Giant', 'Herbie Hancock',\n        'Jethro Tull', 'John Coltrane', 'John Scofield', 'John Zorn', 'Ken Vandermark',\n        'King Crimson', 'Led Zeppelin', 'Mahavishnu Orchestra', 'Miles Davis', 'Nirvana',\n        'Ornette Coleman', 'Paul McCartney', 'Pearl Jam', 'Pink Floyd', 'Police',\n        'Porcupine Tree', 'Radiohead', 'Red Hot Chili Peppers', 'Return to Forever', 'Rush',\n        'Smashing Pumpkins', 'Soft Machine', 'Soundgarden', 'Stone Temple Pilots', 'System of a Down',\n        'Thelonious Monk', 'Weather Report', 'Wings', 'Yes'\n    ]\n\n    listbox_chooser = ListboxChooser('Choose Artist/s', {name: name for name in artist_names})\n\n    models = (music_graph_model(a, 2) for _, a in listbox_chooser.get_choices())\n    model = reduce(operator.add, models)\n\n    # Use the GraphQLBuilder Builder\n    builder = graphinate.builders.GraphQLBuilder(graph_model)\n\n    # build the strawberry-graphql schema\n    schema = builder.build()\n\n    # plot the graph using matplotlib\n    graphinate.server(schema)\n</code></pre>"},{"location":"tutorial/#step-5-run-the-script","title":"Step 5: Run the Script","text":"<p>Combine the code from steps 3 and step 4 into a single script <code>music_artists.py</code>.</p> <p>Finally, run the script to start the application and create the music artist graph.</p> <p>A preloaded diskcache cache is included in the repository, so you can run the script without having to wait for the API calls.</p> <pre><code>python music_artists.py\n</code></pre> <p>This will open a GUI window where you can select artists and generate the graph model.</p>"},{"location":"examples/code/","title":"Code","text":""},{"location":"examples/code/#git-commits","title":"GIT Commits","text":"GIT Commits examples/code/git_commits.py<pre><code> import operator\n from pathlib import Path\n from tempfile import TemporaryDirectory\n\n import git\n\n import graphinate\n\n\n def create_graph_model(repo: git.Repo):\n     # Fetch all branches from the remote\n     repo.git.fetch('--all')\n\n     graph_model = graphinate.GraphModel(name='Git Repository Graph')\n\n     @graph_model.node(operator.itemgetter('type'), key=operator.itemgetter('id'), label=operator.itemgetter('label'))\n     def commit():\n         for b in repo.remote().refs:\n             for c in repo.iter_commits(b):\n                 branch = b.name.replace('origin/', '')\n                 for char in '-/. ':\n                     if char in branch:\n                         branch = branch.replace(char, '_')\n\n                 yield {'id': c.hexsha,\n                        'type': branch,\n                        'branch': b.name,\n                        'label': c.summary}\n                 for f in c.stats.files:\n                     yield {'id': f,\n                            'type': 'file',\n                            'branch': b.name,\n                            'label': f}\n\n     @graph_model.edge()\n     def branch():\n         for b in repo.remote().refs:\n             for c in repo.iter_commits(b):\n                 if c.parents:\n                     yield {'source': c.parents[0].hexsha, 'target': c.hexsha}\n                     for f in c.stats.files:\n                         yield {'source': c.hexsha, 'target': f}\n\n     return graph_model\n\n\n def git_commits(repo_url: str):\n     with TemporaryDirectory() as temp_dir:\n         repo_path = Path(temp_dir)\n\n         with git.Repo.clone_from(repo_url, repo_path) as repo:\n             model = create_graph_model(repo)\n             schema = graphinate.builders.GraphQLBuilder(model).build()\n             graphinate.graphql.server(schema)\n\n\n if __name__ == '__main__':\n     # git_commits(repo_url='https://github.com/google/magika.git')\n     git_commits(repo_url='https://github.com/erivlis/mappingtools.git')\n</code></pre>"},{"location":"examples/code/#python-ast","title":"Python AST","text":"Python ASTPlot3D Force-Directed Animation examples/code/python_ast.py<pre><code> \"\"\"\n Define functions to create an abstract syntax tree (AST) graph model using the 'graphinate' library.\n The 'ast_graph_model' function parses the AST of a specified class and creates nodes and edges for the graph model.\n The nodes represent AST nodes with their type and label, while the edges represent relationships between AST nodes.\n \"\"\"\n\n import ast\n import hashlib\n import inspect\n import operator\n import pickle\n import threading\n import webbrowser\n from _ast import AST\n from collections.abc import Iterable\n from tempfile import TemporaryDirectory\n\n import graphinate\n\n\n def _ast_nodes(parsed_asts: Iterable[AST]):\n     for item in parsed_asts:\n         if not isinstance(item, ast.Load):\n             yield item\n             yield from _ast_nodes(ast.iter_child_nodes(item))\n\n\n def _ast_edge(parsed_ast: AST):\n     for child_ast in ast.iter_child_nodes(parsed_ast):\n         if not isinstance(child_ast, ast.Load):\n             edge = {'source': parsed_ast, 'target': child_ast}\n             edge_types = (\n                 field_name\n                 for field_name, value\n                 in ast.iter_fields(parsed_ast)\n                 if child_ast == value\n                    or (child_ast in value if isinstance(value, list) else False)\n             )\n             edge_type = next(edge_types, None)\n             if edge_type:\n                 edge['type'] = edge_type\n             yield edge\n             yield from _ast_edge(child_ast)\n\n\n def ast_graph_model():\n     \"\"\"\n     Create an abstract syntax tree (AST) graph model.\n\n     Returns:\n         GraphModel: A graph model representing the AST nodes and their relationships.\n     \"\"\"\n\n     code_object = graphinate.builders.D3Builder\n\n     graph_model = graphinate.model(name=f'AST Graph - {code_object.__qualname__}',)\n\n     root_ast_node = ast.parse(inspect.getsource(graphinate.builders.D3Builder))\n\n     def node_type(ast_node):\n         return ast_node.__class__.__name__\n\n     def node_label(ast_node) -&gt; str:\n         label = ast_node.__class__.__name__\n\n         for field_name in ('name', 'id'):\n             if field_name in ast_node._fields:\n                 value = operator.attrgetter(field_name)(ast_node)\n                 label = f\"{label}\\n{field_name}: {value}\"\n\n         return label\n\n     def key(value):\n         # noinspection InsecureHash\n         return hashlib.shake_128(pickle.dumps(value)).hexdigest(20)\n\n     def endpoint(value, endpoint_name):\n         return key(value[endpoint_name])\n\n     def source(value):\n         return endpoint(value, 'source')\n\n     def target(value):\n         return endpoint(value, 'target')\n\n     @graph_model.node(type_=node_type,\n                       key=key,\n                       label=node_label,\n                       unique=True)\n     def ast_node(**kwargs):\n         yield from _ast_nodes([root_ast_node])\n\n     @graph_model.edge(type_='edge',\n                       source=source,\n                       target=target,\n                       label=operator.itemgetter('type'))\n     def ast_edge(**kwargs):\n         yield from _ast_edge(root_ast_node)\n\n     return graph_model\n\n\n def create_server(port: int, root_directory: str, open_browser: bool = True) -&gt; threading.Thread:\n     import http.server\n     import socketserver\n\n     url = f\"http://localhost:{port}\"\n\n     class Handler(http.server.SimpleHTTPRequestHandler):\n         def __init__(self, *args, **kwargs):\n             super().__init__(*args, directory=root_directory, **kwargs)\n\n     def serve():\n         with socketserver.TCPServer(('', port), Handler) as httpd:\n             print(\"Serving at:\", url)\n             httpd.serve_forever()\n\n     server_thread = threading.Thread(target=serve)\n     server_thread.daemon = True\n     server_thread.start()\n\n     if open_browser:\n         webbrowser.open(url)\n\n\n if __name__ == '__main__':\n     ast_model = ast_graph_model()\n     # schema = graphinate.builders.GraphQLBuilder(ast_model).build()\n     # graphinate.graphql.server(schema)\n\n     diagram = graphinate.builders.MermaidBuilder(ast_model).build(with_edge_labels=False)\n\n     html_diagram = graphinate.mermaid.html(diagram)\n\n     ## Save the HTML diagram to a file and serve it\n     with TemporaryDirectory() as temp_dir:\n         with open(f\"{temp_dir}/index.html\", 'w') as f:\n             f.write(html_diagram)\n\n         # Serve the HTML diagram\n         create_server(port=8077, root_directory=temp_dir, open_browser=True)\n\n         # Keep the main thread alive to allow the server to run\n         try:\n             while True:\n                 pass\n         except KeyboardInterrupt:\n             print(\"Server stopped\")\n</code></pre>"},{"location":"examples/code/#python-dependencies","title":"Python Dependencies","text":"Python Dependencies examples/code/python_dependencies.py<pre><code> from pipdeptree._cli import get_options\n from pipdeptree._discovery import get_installed_distributions\n from pipdeptree._models import PackageDAG\n\n import graphinate\n\n\n def dependency_graph_model():\n     \"\"\"\n     Generate a dependency graph model.\n\n     Returns:\n         GraphModel: A graph model representing the dependency graph.\n     \"\"\"\n\n     options = get_options(args=None)\n\n     pkgs = get_installed_distributions(local_only=options.local_only, user_only=options.user_only)\n     tree = PackageDAG.from_pkgs(pkgs)\n\n     graph_model = graphinate.model(name=\"Dependency Graph\")\n\n     @graph_model.edge()\n     def dependency():\n         for p, d in tree.items():\n             for c in d:\n                 yield {'source': p.project_name, 'target': c.project_name}\n\n     return graph_model\n\n\n if __name__ == '__main__':\n     dependency_model = dependency_graph_model()\n     schema = graphinate.builders.GraphQLBuilder(dependency_model).build()\n     graphinate.graphql.server(schema)\n</code></pre>"},{"location":"examples/github/","title":"GitHub","text":""},{"location":"examples/github/#repositories","title":"Repositories","text":"RepositoriesDependenciesPlot examples/github/repositories.py<pre><code>import itertools\nimport operator\nimport pathlib\nfrom typing import Optional\n\nfrom _client import github_commits, github_files, github_repositories, github_user  # see _client.py\n\nimport graphinate\n\n\ndef repo_graph_model():  # noqa: C901\n    \"\"\"\n    Create a graph model for GitHub repositories.\n\n    Returns:\n        GraphModel: A graph model representing GitHub repositories with nodes and edges.\n    \"\"\"\n\n    graph_model = graphinate.model(name='GitHub Repository Graph')\n\n    @graph_model.edge()\n    def github(user_id: Optional[str] = None,\n               repository_id: Optional[str] = None,\n               commit_id: Optional[str] = None,\n               file_id: Optional[str] = None,\n               **kwargs):\n        user = github_user(user_id)\n        for repo in github_repositories(user_id, repository_id):\n            yield {'source': (user.login,), 'target': (user.login, repo.name)}\n            for commit in github_commits(repo, commit_id):\n                yield {\n                    'source': (user.login, repo.name),\n                    'target': (user.login, repo.name, commit.sha)\n                }\n                for file in github_files(commit, file_id):\n                    yield {\n                        'source': (user.login, repo.name, commit.sha),\n                        'target': (user.login, repo.name, commit.sha, file.filename)\n                    }\n\n    user_node = graph_model.node(key=operator.attrgetter('login'),\n                                 value=operator.attrgetter('raw_data'),\n                                 label=operator.itemgetter('name'))\n\n    repository_node = graph_model.node(parent_type='user',\n                                       key=operator.attrgetter('name'),\n                                       value=operator.attrgetter('raw_data'),\n                                       label=operator.itemgetter('name'))\n\n    def commit_label(commit):\n        return commit['sha'][-7:]\n\n    commit_node = graph_model.node(parent_type='repository',\n                                   key=operator.attrgetter('sha'),\n                                   value=operator.attrgetter('raw_data'),\n                                   label=commit_label)\n\n    file_node = graph_model.node(parent_type='commit',\n                                 unique=True,\n                                 key=operator.attrgetter('filename'),\n                                 value=operator.attrgetter('raw_data'),\n                                 label=operator.itemgetter('filename'))\n\n    @user_node\n    def user(user_id: Optional[str] = None, **kwargs):\n        yield github_user(user_id)\n\n    @repository_node\n    def repository(user_id: Optional[str] = None,\n                   repository_id: Optional[str] = None,\n                   **kwargs):\n        repos = github_repositories(user_id, repository_id)\n        yield from repos\n\n    @commit_node\n    def commit(user_id: Optional[str] = None,\n               repository_id: Optional[str] = None,\n               commit_id: Optional[str] = None,\n               **kwargs):\n        for repo in github_repositories(user_id, repository_id):\n            yield from github_commits(repo, commit_id)\n\n    def file_type(user_id: Optional[str] = None,\n                  repository_id: Optional[str] = None,\n                  commit_id: Optional[str] = None,\n                  file_type_id: Optional[str] = None,\n                  **kwargs):\n        def group_key(file):\n            return pathlib.PurePath(file).suffix\n\n        for repo in github_repositories(user_id, repository_id):\n            for commit in github_commits(repo, commit_id):\n                yield from ((k, list(g)) for k, g in\n                            itertools.groupby(\n                                sorted(github_files(commit),\n                                       key=group_key), group_key\n                            ))\n\n    @file_node\n    def file(user_id: Optional[str] = None,\n             repository_id: Optional[str] = None,\n             commit_id: Optional[str] = None,\n             file_id: Optional[str] = None,\n             **kwargs):\n        for repo in github_repositories(user_id, repository_id):\n            for commit in github_commits(repo, commit_id):\n                yield from github_files(commit, file_id)\n\n    return graph_model\n\n\nif __name__ == '__main__':\n    repo_model = repo_graph_model()\n\n    params = {\n        'user_id': 'erivlis',\n        'repository_id': 'graphinate',\n        # 'user_id': 'andybrewer',\n        # 'repository_id': 'operation-go',\n        # 'commit_id': None,\n        # 'file_id': 'README.md',\n        # 'user_id' \"strawberry-graphql\"\n    }\n\n    schema = graphinate.builders.GraphQLBuilder(repo_model).build(**params)\n    graphinate.graphql.server(schema)\n</code></pre> examples/github/requirements.txt<pre><code>graphinate\nPyGithub\n</code></pre> examples/github/_client.py<pre><code>import functools\nimport os\nfrom collections.abc import Iterable\nfrom typing import Optional, Union\n\n# see requirements.txt\nfrom github import Auth, Github\nfrom github.AuthenticatedUser import AuthenticatedUser\nfrom github.Commit import Commit\nfrom github.File import File\nfrom github.NamedUser import NamedUser\nfrom github.Repository import Repository\n\n# define a 'GITHUB_TOKEN' Env Var.\ntoken = os.getenv('GITHUB_TOKEN')\n\n# using an access token\nauth = Auth.Token(token)\n\n# Public Web GitHub\nclient = Github(auth=auth)\n\n\n# or GitHub Enterprise with custom hostname\n# g = Github(auth=auth, base_url='https://{hostname}/api/v3')\n\n\n@functools.lru_cache\ndef github_user(user_id: Optional[str] = None) -&gt; Union[NamedUser, AuthenticatedUser]:\n    \"\"\"\n    Get the GitHub user object for the specified user ID or the authenticated user.\n\n    Args:\n        user_id (Optional[str]): The ID of the user to retrieve.\n                                 If not provided, retrieve the authenticated user.\n\n    Returns:\n        Union[NamedUser, AuthenticatedUser]: The GitHub user object corresponding to the user ID provided,\n                                             or the authenticated user if no user ID is specified.\n    Note:\n        This function requires authentication with a valid GitHub token.\n    \"\"\"\n    user = client.get_user(user_id) if user_id else client.get_user()\n    return user\n\n\n@functools.lru_cache\ndef github_repositories(\n        user_id: Optional[str] = None,\n        repo_id: Optional[str] = None) -&gt; Iterable[Repository]:\n    \"\"\"\n    Get the GitHub repositories for the specified user ID or the authenticated user.\n\n    Args:\n        user_id (Optional[str]): The ID of the user whose repositories to retrieve.\n                                 If not provided, retrieve repositories of the authenticated user.\n        repo_id (Optional[str]): The ID of the repository to retrieve.\n                                 If provided, only that repository will be returned.\n\n    Returns:\n        Iterable[Repository]:\n        A list of GitHub repository objects corresponding to the user ID and/or repository ID provided.\n\n    Note:\n        This function requires authentication with a valid GitHub token.\n    \"\"\"\n\n    user = github_user(user_id)\n    if repo_id and (repo := user.get_repo(name=repo_id)):\n        return [repo]\n    else:\n        return user.get_repos()\n\n\ndef github_commits(\n        repo: Repository,\n        commit_id: Optional[str] = None) -&gt; Iterable[Commit]:\n    \"\"\"\n    Retrieve commits from a GitHub repository.\n\n    Args:\n        repo (Repository): The GitHub repository object from which to retrieve commits.\n        commit_id (str, optional): The ID of the commit to retrieve.\n                                   If provided, only that commit will be returned.\n                                   Defaults to None.\n\n    Returns:\n        Iterable[Commit]: An Iterable of Commit objects representing the commits in the repository.\n\n    Example:\n        To retrieve all commits from a repository:\n        ```\n        for commit in github_commits(repo):\n            print(commit)\n        ```\n\n        To retrieve a specific commit by ID:\n        ```\n        for commit in github_commits(repo, commit_id='abcdef123456'):\n            print(commit)\n        ```\n\n    Note:\n        This function requires authentication with a valid GitHub token.\n    \"\"\"\n    if commit_id and (commit := repo.get_commit(sha=commit_id)):\n        yield commit\n    else:\n        yield from repo.get_commits()\n\n\ndef github_files(\n        commit: Commit,\n        file_id: Optional[str] = None) -&gt; Iterable[File]:\n    \"\"\"\n    Retrieves Files from a GitHub Commit\n\n    Args:\n        commit (Commit): A Commit object from the GitHub API.\n        file_id (Optional[str]): An optional parameter specifying the filename to filter the files. Default is None.\n\n    Returns:\n        Iterable[File]: An Iterable of File objects based on the filtering criteria.\n\n    Note:\n        This function requires authentication with a valid GitHub token.\n    \"\"\"\n    files: list[File] = commit.files\n    if file_id:\n        yield from [file for file in files if file.filename == file_id]\n    else:\n        yield from files\n</code></pre>"},{"location":"examples/github/#followers","title":"Followers","text":"FollowersDependencies examples/github/followers.py<pre><code>\"\"\"\nDefines a function `followers_graph_model` that creates a graph model representing GitHub followers.\nIt recursively fetches followers of a given user up to a specified maximum depth.\nThe function yields edges between users in the graph.\n\"\"\"\n\nfrom typing import Optional\n\nfrom _client import github_user  # see _client.py\n\nimport graphinate\n\nDEPTH = 0\n\n\ndef followers_graph_model(max_depth: int = DEPTH):\n    \"\"\"\n    Create a graph model representing GitHub followers.\n\n    Args:\n        max_depth (int): The maximum depth to fetch followers recursively (default is 0).\n\n    Returns:\n        GraphModel: A graph model representing GitHub followers.\n    \"\"\"\n\n    graph_model = graphinate.model(name='Github Followers Graph')\n\n    def _followers(user_id: Optional[str] = None, depth: int = 0, **kwargs):\n        user = github_user(user_id)\n        for follower in user.get_followers():\n            yield {'source': user.login, 'target': follower.login}\n            if depth &lt; max_depth:\n                yield from _followers(follower.login, depth=depth + 1, **kwargs)\n\n    @graph_model.edge()\n    def followed_by(user_id: Optional[str] = None, **kwargs):\n        yield from _followers(user_id, **kwargs)\n\n    return graph_model\n\n\nif __name__ == '__main__':\n    followers_model = followers_graph_model(max_depth=1)\n\n    params = {\n        'user_id': 'erivlis'\n        # 'user_id': 'andybrewer'\n        # 'user_id' \"strawberry-graphql\"\n    }\n\n    builder = graphinate.builders.GraphQLBuilder(followers_model, graph_type=graphinate.GraphType.DiGraph)\n    schema = builder.build(default_node_attributes={'type': 'user'}, **params)\n    graphinate.graphql.server(schema)\n</code></pre> examples/github/requirements.txt<pre><code>graphinate\nPyGithub\n</code></pre> examples/github/_client.py<pre><code>import functools\nimport os\nfrom collections.abc import Iterable\nfrom typing import Optional, Union\n\n# see requirements.txt\nfrom github import Auth, Github\nfrom github.AuthenticatedUser import AuthenticatedUser\nfrom github.Commit import Commit\nfrom github.File import File\nfrom github.NamedUser import NamedUser\nfrom github.Repository import Repository\n\n# define a 'GITHUB_TOKEN' Env Var.\ntoken = os.getenv('GITHUB_TOKEN')\n\n# using an access token\nauth = Auth.Token(token)\n\n# Public Web GitHub\nclient = Github(auth=auth)\n\n\n# or GitHub Enterprise with custom hostname\n# g = Github(auth=auth, base_url='https://{hostname}/api/v3')\n\n\n@functools.lru_cache\ndef github_user(user_id: Optional[str] = None) -&gt; Union[NamedUser, AuthenticatedUser]:\n    \"\"\"\n    Get the GitHub user object for the specified user ID or the authenticated user.\n\n    Args:\n        user_id (Optional[str]): The ID of the user to retrieve.\n                                 If not provided, retrieve the authenticated user.\n\n    Returns:\n        Union[NamedUser, AuthenticatedUser]: The GitHub user object corresponding to the user ID provided,\n                                             or the authenticated user if no user ID is specified.\n    Note:\n        This function requires authentication with a valid GitHub token.\n    \"\"\"\n    user = client.get_user(user_id) if user_id else client.get_user()\n    return user\n\n\n@functools.lru_cache\ndef github_repositories(\n        user_id: Optional[str] = None,\n        repo_id: Optional[str] = None) -&gt; Iterable[Repository]:\n    \"\"\"\n    Get the GitHub repositories for the specified user ID or the authenticated user.\n\n    Args:\n        user_id (Optional[str]): The ID of the user whose repositories to retrieve.\n                                 If not provided, retrieve repositories of the authenticated user.\n        repo_id (Optional[str]): The ID of the repository to retrieve.\n                                 If provided, only that repository will be returned.\n\n    Returns:\n        Iterable[Repository]:\n        A list of GitHub repository objects corresponding to the user ID and/or repository ID provided.\n\n    Note:\n        This function requires authentication with a valid GitHub token.\n    \"\"\"\n\n    user = github_user(user_id)\n    if repo_id and (repo := user.get_repo(name=repo_id)):\n        return [repo]\n    else:\n        return user.get_repos()\n\n\ndef github_commits(\n        repo: Repository,\n        commit_id: Optional[str] = None) -&gt; Iterable[Commit]:\n    \"\"\"\n    Retrieve commits from a GitHub repository.\n\n    Args:\n        repo (Repository): The GitHub repository object from which to retrieve commits.\n        commit_id (str, optional): The ID of the commit to retrieve.\n                                   If provided, only that commit will be returned.\n                                   Defaults to None.\n\n    Returns:\n        Iterable[Commit]: An Iterable of Commit objects representing the commits in the repository.\n\n    Example:\n        To retrieve all commits from a repository:\n        ```\n        for commit in github_commits(repo):\n            print(commit)\n        ```\n\n        To retrieve a specific commit by ID:\n        ```\n        for commit in github_commits(repo, commit_id='abcdef123456'):\n            print(commit)\n        ```\n\n    Note:\n        This function requires authentication with a valid GitHub token.\n    \"\"\"\n    if commit_id and (commit := repo.get_commit(sha=commit_id)):\n        yield commit\n    else:\n        yield from repo.get_commits()\n\n\ndef github_files(\n        commit: Commit,\n        file_id: Optional[str] = None) -&gt; Iterable[File]:\n    \"\"\"\n    Retrieves Files from a GitHub Commit\n\n    Args:\n        commit (Commit): A Commit object from the GitHub API.\n        file_id (Optional[str]): An optional parameter specifying the filename to filter the files. Default is None.\n\n    Returns:\n        Iterable[File]: An Iterable of File objects based on the filtering criteria.\n\n    Note:\n        This function requires authentication with a valid GitHub token.\n    \"\"\"\n    files: list[File] = commit.files\n    if file_id:\n        yield from [file for file in files if file.filename == file_id]\n    else:\n        yield from files\n</code></pre>"},{"location":"examples/math/","title":"Math","text":""},{"location":"examples/math/#graph-atlas","title":"Graph Atlas","text":"Graph AtlasDependencies examples/math/graph_atlas.py<pre><code>import operator\n\nimport graphs\nimport networkx as nx\nfrom materializers import Materializers, materialize\n\nimport graphinate\n\n\ndef model(items: list[tuple[str, nx.Graph]]) -&gt; graphinate.GraphModel:\n    \"\"\"\n    Generate a graph model based on the provided iterable of graphs.\n    The function creates a graph model named 'Graph Atlas' using the 'graphinate' library.\n    It then combines all the graphs from the input iterable into a single disjoint union graph using NetworkX library.\n    The function defines edges for the combined graph by iterating over all edges in the disjoint union graph and\n    yielding dictionaries with 'source' and 'target' keys representing the edge connections.\n    Finally, the function yields the created graph model containing the combined graph with defined edges.\n\n    Args:\n        items: A list containing graphs to be combined into a single graph model.\n\n    Yields:\n        GraphModel: A graph model containing the combined graph with defined edges.\n    \"\"\"\n\n    def items_iter(recs):\n        for name, g in recs:\n            print(name)\n            yield g\n\n    g = nx.disjoint_union_all(items_iter(items)) if len(items) &gt; 1 else items[0][1]\n\n    graph_model = graphinate.model('Graph Atlas')\n\n    @graph_model.node(operator.itemgetter(1),\n                      key=operator.itemgetter(0),\n                      value=operator.itemgetter(0))\n    def nodes():\n        yield from g.nodes(data='type')\n\n    @graph_model.edge(operator.itemgetter('type'))\n    def edge():\n        yield from ({'source': e[0], 'target': e[1], **e[2]} for e in g.edges.data())\n\n    return graph_model\n\n\nif __name__ == '__main__':\n    from gui import ListboxChooser, RadiobuttonChooser\n\n    graph_atlas = graphs.atlas()\n\n    listbox_chooser = ListboxChooser('Choose Graph/s', graph_atlas)\n    choices = list(listbox_chooser.get_choices())\n    model = model(choices)\n\n    # or\n    # model(graph_atlas.values())\n\n    radiobutton_chooser = RadiobuttonChooser('Choose Materializer',\n                                             options={m.name: m.value for m in Materializers},\n                                             default=(None, None))\n    result = radiobutton_chooser.get_choice()\n    builder, handler = result[1]\n    materialize(model, builder=builder, builder_output_handler=handler)\n</code></pre> examples/math/requirements.txt<pre><code>graphinate\nnetworkx\n</code></pre> examples/math/graph.py<pre><code>import itertools\nimport re\nfrom collections.abc import Iterable\nfrom typing import NewType\n\nimport networkx as nx\n\nSPECIAL_GRAPHS_ADJACENCY_LISTS = {\n    'Buckyball - Truncated Icosahedral Graph': {\n        1: [2, 3, 4],\n        2: [1, 55, 56],\n        3: [1, 58, 60],\n        4: [1, 57, 59],\n        5: [8, 13, 14],\n        6: [8, 12, 15],\n        7: [8, 11, 16],\n        8: [5, 6, 7],\n        9: [13, 15, 25],\n        10: [14, 16, 26],\n        11: [7, 12, 24],\n        12: [6, 11, 23],\n        13: [5, 9, 18],\n        14: [5, 10, 17],\n        15: [6, 9, 19],\n        16: [7, 10, 20],\n        17: [14, 18, 30],\n        18: [13, 17, 29],\n        19: [15, 28, 32],\n        20: [16, 27, 31],\n        21: [26, 30, 46],\n        22: [25, 29, 45],\n        23: [12, 28, 38],\n        24: [11, 27, 37],\n        25: [9, 22, 32],\n        26: [10, 21, 31],\n        27: [20, 24, 35],\n        28: [19, 23, 36],\n        29: [18, 22, 43],\n        30: [17, 21, 44],\n        31: [20, 26, 42],\n        32: [19, 25, 41],\n        33: [35, 42, 53],\n        34: [36, 41, 54],\n        35: [27, 33, 40],\n        36: [28, 34, 39],\n        37: [24, 38, 40],\n        38: [23, 37, 39],\n        39: [36, 38, 52],\n        40: [35, 37, 51],\n        41: [32, 34, 50],\n        42: [31, 33, 49],\n        43: [29, 44, 48],\n        44: [30, 43, 47],\n        45: [22, 48, 50],\n        46: [21, 47, 49],\n        47: [44, 46, 60],\n        48: [43, 45, 59],\n        49: [42, 46, 58],\n        50: [41, 45, 57],\n        51: [40, 52, 56],\n        52: [39, 51, 55],\n        53: [33, 56, 58],\n        54: [34, 55, 57],\n        55: [2, 52, 54],\n        56: [2, 51, 53],\n        57: [4, 50, 54],\n        58: [3, 49, 53],\n        59: [4, 48, 60],\n        60: [3, 47, 59]\n    },\n    'D30 - Rhombic Triacontahedral Graph': {\n        1: [21, 22, 23],\n        2: [24, 27, 30],\n        3: [24, 29, 30],\n        4: [26, 29, 32],\n        5: [26, 28, 32],\n        6: [25, 27, 31],\n        7: [25, 28, 31],\n        8: [24, 26, 29],\n        9: [24, 25, 27],\n        10: [25, 26, 28],\n        11: [24, 25, 26],\n        12: [22, 29, 30],\n        13: [21, 27, 30],\n        14: [23, 28, 32],\n        15: [23, 28, 31],\n        16: [22, 29, 32],\n        17: [21, 27, 31],\n        18: [21, 22, 30],\n        19: [22, 23, 32],\n        20: [21, 23, 31],\n        21: [1, 13, 17, 18, 20],\n        22: [1, 12, 16, 18, 19],\n        23: [1, 14, 15, 19, 20],\n        24: [2, 3, 8, 9, 11],\n        25: [6, 7, 9, 10, 11],\n        26: [4, 5, 8, 10, 11],\n        27: [2, 6, 9, 13, 17],\n        28: [5, 7, 10, 14, 15],\n        29: [3, 4, 8, 12, 16],\n        30: [2, 3, 12, 13, 18],\n        31: [6, 7, 15, 17, 20],\n        32: [4, 5, 14, 16, 19]\n    },\n    'Small Rhombicosidodecahedral Graph': {\n        1: [2, 3, 4, 5],\n        2: [1, 54, 55, 59],\n        3: [1, 53, 56, 60],\n        4: [1, 5, 58, 60],\n        5: [1, 4, 57, 59],\n        6: [24, 25, 57, 58],\n        7: [12, 13, 16, 17],\n        8: [9, 11, 19, 25],\n        9: [8, 10, 18, 24],\n        10: [9, 11, 12, 18],\n        11: [8, 10, 13, 19],\n        12: [7, 10, 14, 20],\n        13: [7, 11, 15, 21],\n        14: [12, 18, 20, 37],\n        15: [13, 19, 21, 38],\n        16: [7, 17, 21, 23],\n        17: [7, 16, 20, 22],\n        18: [9, 10, 14, 28],\n        19: [8, 11, 15, 29],\n        20: [12, 14, 17, 33],\n        21: [13, 15, 16, 32],\n        22: [17, 23, 31, 34],\n        23: [16, 22, 30, 34],\n        24: [6, 9, 27, 28],\n        25: [6, 8, 26, 29],\n        26: [25, 29, 46, 58],\n        27: [24, 28, 45, 57],\n        28: [18, 24, 27, 44],\n        29: [19, 25, 26, 43],\n        30: [23, 32, 36, 42],\n        31: [22, 33, 35, 41],\n        32: [21, 30, 38, 39],\n        33: [20, 31, 37, 40],\n        34: [22, 23, 41, 42],\n        35: [31, 40, 41, 51],\n        36: [30, 39, 42, 52],\n        37: [14, 33, 40, 44],\n        38: [15, 32, 39, 43],\n        39: [32, 36, 38, 48],\n        40: [33, 35, 37, 47],\n        41: [31, 34, 35, 50],\n        42: [30, 34, 36, 49],\n        43: [29, 38, 46, 48],\n        44: [28, 37, 45, 47],\n        45: [27, 44, 47, 59],\n        46: [26, 43, 48, 60],\n        47: [40, 44, 45, 54],\n        48: [39, 43, 46, 53],\n        49: [42, 50, 52, 56],\n        50: [41, 49, 51, 55],\n        51: [35, 50, 54, 55],\n        52: [36, 49, 53, 56],\n        53: [3, 48, 52, 60],\n        54: [2, 47, 51, 59],\n        55: [2, 50, 51, 56],\n        56: [3, 49, 52, 55],\n        57: [5, 6, 27, 58],\n        58: [4, 6, 26, 57],\n        59: [2, 5, 45, 54],\n        60: [3, 4, 46, 53]\n    },\n    'Small Rhombicuboctahedral Graph': {\n        1: [2, 3, 4, 5],\n        2: [1, 18, 22, 24],\n        3: [1, 19, 22, 23],\n        4: [1, 5, 21, 24],\n        5: [1, 4, 20, 23],\n        6: [10, 11, 20, 21],\n        7: [10, 11, 12, 13],\n        8: [10, 14, 20, 23],\n        9: [11, 15, 21, 24],\n        10: [6, 7, 8, 14],\n        11: [6, 7, 9, 15],\n        12: [7, 13, 15, 17],\n        13: [7, 12, 14, 16],\n        14: [8, 10, 13, 19],\n        15: [9, 11, 12, 18],\n        16: [13, 17, 19, 22],\n        17: [12, 16, 18, 22],\n        18: [2, 15, 17, 24],\n        19: [3, 14, 16, 23],\n        20: [5, 6, 8, 21],\n        21: [4, 6, 9, 20],\n        22: [2, 3, 16, 17],\n        23: [3, 5, 8, 19],\n        24: [2, 4, 9, 18]\n    },\n    'Great Rhombicosidodecahedral Graph': {\n        1: [2, 3, 4],\n        2: [1, 119, 120],\n        3: [1, 118, 120],\n        4: [1, 116, 117],\n        5: [6, 7, 120],\n        6: [5, 114, 115],\n        7: [5, 113, 115],\n        8: [9, 10, 115],\n        9: [8, 111, 112],\n        10: [8, 110, 112],\n        11: [12, 13, 112],\n        12: [11, 108, 109],\n        13: [11, 107, 109],\n        14: [15, 16, 109],\n        15: [14, 105, 106],\n        16: [14, 104, 106],\n        17: [18, 19, 106],\n        18: [17, 102, 103],\n        19: [17, 101, 103],\n        20: [21, 22, 103],\n        21: [20, 99, 100],\n        22: [20, 98, 100],\n        23: [24, 25, 100],\n        24: [23, 96, 97],\n        25: [23, 95, 97],\n        26: [27, 28, 97],\n        27: [26, 93, 94],\n        28: [26, 92, 94],\n        29: [94, 116, 117],\n        30: [63, 91, 96],\n        31: [32, 33, 91],\n        32: [31, 87, 88],\n        33: [31, 86, 88],\n        34: [35, 36, 88],\n        35: [34, 84, 85],\n        36: [34, 83, 85],\n        37: [38, 85, 113],\n        38: [37, 41, 110],\n        39: [58, 73, 114],\n        40: [86, 117, 119],\n        41: [38, 64, 84],\n        42: [64, 69, 84],\n        43: [53, 55, 111],\n        44: [64, 67, 108],\n        45: [52, 77, 105],\n        46: [65, 70, 102],\n        47: [48, 49, 99],\n        48: [47, 82, 95],\n        49: [47, 80, 81],\n        50: [51, 52, 79],\n        51: [50, 74, 75],\n        52: [45, 50, 75],\n        53: [43, 75, 107],\n        54: [72, 73, 74],\n        55: [43, 73, 74],\n        56: [61, 76, 78],\n        57: [60, 89, 90],\n        58: [39, 59, 118],\n        59: [58, 60, 72],\n        60: [57, 59, 61],\n        61: [56, 60, 72],\n        62: [66, 71, 87],\n        63: [30, 66, 87],\n        64: [41, 42, 44],\n        65: [46, 66, 98],\n        66: [62, 63, 65],\n        67: [44, 68, 104],\n        68: [67, 69, 70],\n        69: [42, 68, 71],\n        70: [46, 68, 71],\n        71: [62, 69, 70],\n        72: [54, 59, 61],\n        73: [39, 54, 55],\n        74: [51, 54, 55],\n        75: [51, 52, 53],\n        76: [56, 82, 89],\n        77: [45, 80, 101],\n        78: [56, 81, 82],\n        79: [50, 80, 81],\n        80: [49, 77, 79],\n        81: [49, 78, 79],\n        82: [48, 76, 78],\n        83: [36, 86, 119],\n        84: [35, 41, 42],\n        85: [35, 36, 37],\n        86: [33, 40, 83],\n        87: [32, 62, 63],\n        88: [32, 33, 34],\n        89: [57, 76, 93],\n        90: [57, 93, 116],\n        91: [30, 31, 92],\n        92: [28, 91, 96],\n        93: [27, 89, 90],\n        94: [27, 28, 29],\n        95: [25, 48, 99],\n        96: [24, 30, 92],\n        97: [24, 25, 26],\n        98: [22, 65, 102],\n        99: [21, 47, 95],\n        100: [21, 22, 23],\n        101: [19, 77, 105],\n        102: [18, 46, 98],\n        103: [18, 19, 20],\n        104: [16, 67, 108],\n        105: [15, 45, 101],\n        106: [15, 16, 17],\n        107: [13, 53, 111],\n        108: [12, 44, 104],\n        109: [12, 13, 14],\n        110: [10, 38, 113],\n        111: [9, 43, 107],\n        112: [9, 10, 11],\n        113: [7, 37, 110],\n        114: [6, 39, 118],\n        115: [6, 7, 8],\n        116: [4, 29, 90],\n        117: [4, 29, 40],\n        118: [3, 58, 114],\n        119: [2, 40, 83],\n        120: [2, 3, 5]\n    },\n    'Disdyakis Dodecahedral Graph': {\n        1: [13, 14, 21, 22],\n        2: [17, 19, 21, 23],\n        3: [18, 20, 22, 24],\n        4: [16, 17, 23, 25],\n        5: [15, 19, 23, 26],\n        6: [15, 18, 24, 26],\n        7: [16, 20, 24, 25],\n        8: [15, 16, 23, 24],\n        9: [14, 17, 21, 25],\n        10: [13, 18, 22, 26],\n        11: [13, 19, 21, 26],\n        12: [14, 20, 22, 25],\n        13: [1, 10, 11, 21, 22, 26],\n        14: [1, 9, 12, 21, 22, 25],\n        15: [5, 6, 8, 23, 24, 26],\n        16: [4, 7, 8, 23, 24, 25],\n        17: [2, 4, 9, 21, 23, 25],\n        18: [3, 6, 10, 22, 24, 26],\n        19: [2, 5, 11, 21, 23, 26],\n        20: [3, 7, 12, 22, 24, 25],\n        21: [1, 2, 9, 11, 13, 14, 17, 19],\n        22: [1, 3, 10, 12, 13, 14, 18, 20],\n        23: [2, 4, 5, 8, 15, 16, 17, 19],\n        24: [3, 6, 7, 8, 15, 16, 18, 20],\n        25: [4, 7, 9, 12, 14, 16, 17, 20],\n        26: [5, 6, 10, 11, 13, 15, 18, 19]\n    },\n    'Deltoidal Icositetrahedral Graph': {\n        1: [15, 24, 26],\n        2: [15, 23, 25],\n        3: [16, 18, 20],\n        4: [17, 19, 20],\n        5: [16, 22, 26],\n        6: [19, 22, 25],\n        7: [18, 21, 24],\n        8: [17, 21, 23],\n        9: [15, 22, 25, 26],\n        10: [15, 21, 23, 24],\n        11: [16, 18, 24, 26],\n        12: [17, 19, 23, 25],\n        13: [16, 19, 20, 22],\n        14: [17, 18, 20, 21],\n        15: [1, 2, 9, 10],\n        16: [3, 5, 11, 13],\n        17: [4, 8, 12, 14],\n        18: [3, 7, 11, 14],\n        19: [4, 6, 12, 13],\n        20: [3, 4, 13, 14],\n        21: [7, 8, 10, 14],\n        22: [5, 6, 9, 13],\n        23: [2, 8, 10, 12],\n        24: [1, 7, 10, 11],\n        25: [2, 6, 9, 12],\n        26: [1, 5, 9, 11]\n    },\n    'Icosidodecahedral Graph': {\n        1: [2, 3, 4, 5],\n        2: [1, 4, 23, 27],\n        3: [1, 5, 24, 28],\n        4: [1, 2, 26, 29],\n        5: [1, 3, 25, 30],\n        6: [7, 8, 9, 10],\n        7: [6, 9, 11, 15],\n        8: [6, 10, 12, 16],\n        9: [6, 7, 14, 18],\n        10: [6, 8, 13, 17],\n        11: [7, 12, 15, 19],\n        12: [8, 11, 16, 19],\n        13: [10, 14, 17, 20],\n        14: [9, 13, 18, 20],\n        15: [7, 11, 21, 23],\n        16: [8, 12, 22, 24],\n        17: [10, 13, 22, 25],\n        18: [9, 14, 21, 26],\n        19: [11, 12, 27, 28],\n        20: [13, 14, 29, 30],\n        21: [15, 18, 23, 26],\n        22: [16, 17, 24, 25],\n        23: [2, 15, 21, 27],\n        24: [3, 16, 22, 28],\n        25: [5, 17, 22, 30],\n        26: [4, 18, 21, 29],\n        27: [2, 19, 23, 28],\n        28: [3, 19, 24, 27],\n        29: [4, 20, 26, 30],\n        30: [5, 20, 25, 29]\n    },\n    'Deltoidal Hexecontahedral Graph': {\n        1: [21, 49, 50],\n        2: [21, 47, 48],\n        3: [23, 25, 26],\n        4: [22, 24, 26],\n        5: [25, 27, 33],\n        6: [24, 30, 36],\n        7: [23, 28, 34],\n        8: [22, 29, 35],\n        9: [27, 30, 31],\n        10: [28, 29, 32],\n        11: [33, 38, 43],\n        12: [34, 38, 46],\n        13: [36, 37, 45],\n        14: [35, 37, 44],\n        15: [32, 40, 42],\n        16: [31, 39, 41],\n        17: [39, 43, 49],\n        18: [40, 46, 50],\n        19: [41, 45, 47],\n        20: [42, 44, 48],\n        21: [1, 2, 51, 52],\n        22: [4, 8, 54, 56],\n        23: [3, 7, 53, 56],\n        24: [4, 6, 54, 55],\n        25: [3, 5, 53, 55],\n        26: [3, 4, 55, 56],\n        27: [5, 9, 55, 57],\n        28: [7, 10, 56, 58],\n        29: [8, 10, 56, 60],\n        30: [6, 9, 55, 59],\n        31: [9, 16, 57, 59],\n        32: [10, 15, 58, 60],\n        33: [5, 11, 53, 57],\n        34: [7, 12, 53, 58],\n        35: [8, 14, 54, 60],\n        36: [6, 13, 54, 59],\n        37: [13, 14, 54, 62],\n        38: [11, 12, 53, 61],\n        39: [16, 17, 52, 57],\n        40: [15, 18, 51, 58],\n        41: [16, 19, 52, 59],\n        42: [15, 20, 51, 60],\n        43: [11, 17, 57, 61],\n        44: [14, 20, 60, 62],\n        45: [13, 19, 59, 62],\n        46: [12, 18, 58, 61],\n        47: [2, 19, 52, 62],\n        48: [2, 20, 51, 62],\n        49: [1, 17, 52, 61],\n        50: [1, 18, 51, 61],\n        51: [21, 40, 42, 48, 50],\n        52: [21, 39, 41, 47, 49],\n        53: [23, 25, 33, 34, 38],\n        54: [22, 24, 35, 36, 37],\n        55: [24, 25, 26, 27, 30],\n        56: [22, 23, 26, 28, 29],\n        57: [27, 31, 33, 39, 43],\n        58: [28, 32, 34, 40, 46],\n        59: [30, 31, 36, 41, 45],\n        60: [29, 32, 35, 42, 44],\n        61: [38, 43, 46, 49, 50],\n        62: [37, 44, 45, 47, 48]\n    },\n    'Kocohl74': {\n        1: [2, 3, 4],\n        2: [1, 71, 74],\n        3: [1, 72, 73],\n        4: [1, 69, 70],\n        5: [6, 43, 60],\n        6: [5, 7, 50],\n        7: [6, 8, 9],\n        8: [7, 39, 40],\n        9: [7, 41, 42],\n        10: [11, 12, 31],\n        11: [10, 21, 25],\n        12: [10, 20, 22],\n        13: [15, 18, 24],\n        14: [15, 44, 47],\n        15: [13, 14, 45],\n        16: [17, 46, 47],\n        17: [16, 18, 21],\n        18: [13, 17, 22],\n        19: [20, 21, 23],\n        20: [12, 19, 24],\n        21: [11, 17, 19],\n        22: [12, 18, 23],\n        23: [19, 22, 28],\n        24: [13, 20, 26],\n        25: [11, 26, 27],\n        26: [24, 25, 35],\n        27: [25, 30, 37],\n        28: [23, 29, 35],\n        29: [28, 30, 34],\n        30: [27, 29, 33],\n        31: [10, 33, 34],\n        32: [40, 46, 48],\n        33: [30, 31, 42],\n        34: [29, 31, 41],\n        35: [26, 28, 42],\n        36: [38, 39, 43],\n        37: [27, 38, 41],\n        38: [36, 37, 40],\n        39: [8, 36, 49],\n        40: [8, 32, 38],\n        41: [9, 34, 37],\n        42: [9, 33, 35],\n        43: [5, 36, 54],\n        44: [14, 49, 52],\n        45: [15, 48, 52],\n        46: [16, 32, 56],\n        47: [14, 16, 51],\n        48: [32, 45, 57],\n        49: [39, 44, 51],\n        50: [6, 55, 58],\n        51: [47, 49, 66],\n        52: [44, 45, 65],\n        53: [58, 63, 67],\n        54: [43, 59, 63],\n        55: [50, 59, 62],\n        56: [46, 57, 66],\n        57: [48, 56, 65],\n        58: [50, 53, 61],\n        59: [54, 55, 64],\n        60: [5, 62, 64],\n        61: [58, 68, 71],\n        62: [55, 60, 72],\n        63: [53, 54, 72],\n        64: [59, 60, 71],\n        65: [52, 57, 70],\n        66: [51, 56, 69],\n        67: [53, 70, 74],\n        68: [61, 69, 73],\n        69: [4, 66, 68],\n        70: [4, 65, 67],\n        71: [2, 61, 64],\n        72: [3, 62, 63],\n        73: [3, 68, 74],\n        74: [2, 67, 73]\n    },\n    'https://houseofgraphs.org/graphs/3312': {\n        1: [2, 3, 4],\n        2: [1, 87, 88],\n        3: [1, 85, 88],\n        4: [1, 84, 86],\n        5: [6, 7, 88],\n        6: [5, 83, 87],\n        7: [5, 81, 82],\n        8: [83, 84, 86],\n        9: [10, 11, 83],\n        10: [9, 80, 86],\n        11: [9, 79, 82],\n        12: [28, 29, 80],\n        13: [28, 45, 80],\n        14: [16, 19, 81],\n        15: [19, 78, 81],\n        16: [14, 17, 82],\n        17: [16, 18, 79],\n        18: [17, 19, 20],\n        19: [14, 15, 18],\n        20: [18, 77, 78],\n        21: [22, 23, 76],\n        22: [21, 72, 75],\n        23: [21, 73, 74],\n        24: [25, 34, 85],\n        25: [24, 26, 27],\n        26: [25, 33, 38],\n        27: [25, 32, 34],\n        28: [12, 13, 31],\n        29: [12, 30, 37],\n        30: [29, 31, 36],\n        31: [28, 30, 39],\n        32: [27, 33, 40],\n        33: [26, 32, 35],\n        34: [24, 27, 43],\n        35: [33, 38, 44],\n        36: [30, 37, 42],\n        37: [29, 36, 41],\n        38: [26, 35, 41],\n        39: [31, 42, 45],\n        40: [32, 43, 44],\n        41: [37, 38, 47],\n        42: [36, 39, 47],\n        43: [34, 40, 46],\n        44: [35, 40, 50],\n        45: [13, 39, 51],\n        46: [43, 65, 85],\n        47: [41, 42, 64],\n        48: [53, 57, 63],\n        49: [52, 56, 60],\n        50: [44, 52, 61],\n        51: [45, 53, 62],\n        52: [49, 50, 65],\n        53: [48, 51, 64],\n        54: [59, 63, 71],\n        55: [58, 60, 70],\n        56: [49, 58, 61],\n        57: [48, 59, 62],\n        58: [55, 56, 67],\n        59: [54, 57, 69],\n        60: [49, 55, 66],\n        61: [50, 56, 67],\n        62: [51, 57, 69],\n        63: [48, 54, 68],\n        64: [47, 53, 68],\n        65: [46, 52, 66],\n        66: [60, 65, 72],\n        67: [58, 61, 75],\n        68: [63, 64, 74],\n        69: [59, 62, 73],\n        70: [55, 72, 75],\n        71: [54, 73, 74],\n        72: [22, 66, 70],\n        73: [23, 69, 71],\n        74: [23, 68, 71],\n        75: [22, 67, 70],\n        76: [21, 77, 78],\n        77: [20, 76, 79],\n        78: [15, 20, 76],\n        79: [11, 17, 77],\n        80: [10, 12, 13],\n        81: [7, 14, 15],\n        82: [7, 11, 16],\n        83: [6, 8, 9],\n        84: [4, 8, 87],\n        85: [3, 24, 46],\n        86: [4, 8, 10],\n        87: [2, 6, 84],\n        88: [2, 3, 5]\n    },\n    'https://houseofgraphs.org/graphs/31104': {\n        1: [2, 3, 4, 5],\n        2: [1, 4, 9, 10],\n        3: [1, 5, 8, 10],\n        4: [1, 2, 6, 8],\n        5: [1, 3, 7, 9],\n        6: [4, 7, 8, 10],\n        7: [5, 6, 9, 10],\n        8: [3, 4, 6, 9],\n        9: [2, 5, 7, 8],\n        10: [2, 3, 6, 7]\n    },\n    'Utility Graph': {\n        1: [2, 3, 4],\n        2: [1, 5, 6],\n        3: [1, 5, 6],\n        4: [1, 5, 6],\n        5: [2, 3, 4],\n        6: [2, 3, 4]\n    },\n    'Errara Graph': {\n        1: [3, 4, 5, 11, 12],\n        2: [6, 7, 8, 9, 10],\n        3: [1, 4, 5, 13, 14],\n        4: [1, 3, 11, 13, 16],\n        5: [1, 3, 12, 14, 17],\n        6: [2, 7, 8, 15, 16],\n        7: [2, 6, 9, 15, 17],\n        8: [2, 6, 10, 13, 16],\n        9: [2, 7, 10, 14, 17],\n        10: [2, 8, 9, 13, 14],\n        11: [1, 4, 12, 15, 16],\n        12: [1, 5, 11, 15, 17],\n        13: [3, 4, 8, 10, 14, 16],\n        14: [3, 5, 9, 10, 13, 17],\n        15: [6, 7, 11, 12, 16, 17],\n        16: [4, 6, 8, 11, 13, 15],\n        17: [5, 7, 9, 12, 14, 15]\n    },\n    'Dragon Curve Blob 6': {\n        1: [4, 15],\n        2: [8, 17],\n        3: [8, 17],\n        4: [1, 14],\n        5: [7, 14],\n        6: [7, 14],\n        7: [5, 6],\n        8: [2, 3],\n        9: [11, 16],\n        10: [13, 15],\n        11: [9, 12],\n        12: [11, 16, 17],\n        13: [10, 16, 17],\n        14: [4, 5, 6, 15],\n        15: [1, 10, 14, 16],\n        16: [9, 12, 13, 15],\n        17: [2, 3, 12, 13]\n    }\n}\n\nAdjacencyList = NewType('AdjacencyList', dict[int, list[int]])\n\n\ndef ladder_ring_graph(size: int) -&gt; nx.Graph:\n    g: nx.Graph = nx.ladder_graph(size)\n    g.add_edge(size, size * 2 - 1)\n    g.add_edge(0, size - 1)\n    g.name = f'Ladder Ring[{size}]'\n    return g\n\n\ndef ladder_mobius_graph(size: int) -&gt; nx.Graph:\n    g = nx.ladder_graph(size)\n    g.add_edge(size, size - 1)\n    g.add_edge(0, size * 2 - 1)\n    g.name = f'Ladder M\u00f6bius Ring[{size}]'\n    return g\n\n\ndef _cylinder_edges(circumference: int, length: int) -&gt; Iterable[tuple[int, int]]:\n    for k in range(length):\n        start = k * circumference\n        stop = (k + 1) * circumference - 1\n        if k &gt; 0:\n            yield start, start - circumference\n            yield stop, stop - circumference\n        for i in range(start, stop):\n            yield i, i + 1\n            if k &gt; 0:\n                yield i, i - circumference\n        yield stop, start\n\n\ndef cylinder_graph(circumference: int, length: int) -&gt; nx.Graph:\n    g = nx.Graph(_cylinder_edges(circumference, length))\n    g.name = f'Cylinder[circumference={circumference},length={length}]'\n    return g\n\n\ndef _spiral_edges(n, k) -&gt; Iterable[tuple[int, int]]:\n    for i in range(n):\n        yield i, i + 1\n        if i - k &gt;= 0:\n            yield i, i - k\n    yield n, n - k\n\n\ndef spiral_graph(n, k) -&gt; nx.Graph:\n    g = nx.Graph(_spiral_edges(n, k))\n    g.name = f'Spiral[n={n},k={k}]'\n    return g\n\n\ndef _spiral_torus_edges(n, k) -&gt; Iterable[tuple[int, int]]:\n    yield from _spiral_edges(n - 1, k)\n    yield n - 1, 0\n    for i in range(k):\n        yield i, n - k + i\n\n\ndef spiral_torus_graph(n, k) -&gt; nx.Graph:\n    g = nx.Graph(_spiral_torus_edges(n, k))\n    g.name = f'Spiral Torus[n={n},k={k}]'\n    return g\n\n\ndef k_regular_edges(n, k) -&gt; Iterable[tuple[int, int]]:\n    yield from itertools.chain.from_iterable(\n        ((i, j) for j in range(i + 1, i + k + 1))\n        for i in range(n-k))\n\ndef k_regular_graph(n, k) -&gt; nx.Graph:\n    g = nx.Graph(k_regular_edges(n, k))\n    g.name = f'Generalized Buckyball[n={n},k={k}]'\n    return g\n\n\ndef adjacency_edges(adjacency_list: AdjacencyList) -&gt; Iterable[tuple[int, int]]:\n    yield from itertools.chain.from_iterable(\n        ((k, t) for t in v)\n        for k, v\n        in adjacency_list.items()\n    )\n\n\ndef from_adjacency_lists(adjacency_lists: dict[str, AdjacencyList]) -&gt; dict[str, nx.Graph]:\n    items = (\n        (name, adjacency_edges(adjacency_list))\n        for name, adjacency_list\n        in adjacency_lists.items()\n    )\n\n    return {n: nx.Graph(list(e)) for n, e in items}\n\n\ndef special_graphs():\n    return from_adjacency_lists(SPECIAL_GRAPHS_ADJACENCY_LISTS)\n\n\ndef atlas():\n    \"\"\"\n    Generate a dictionary of various graph structures and models based on the provided atlas.\n    The function creates different types of graphs and models using NetworkX library.\n    The generated graphs include Tetrahedron, Cube, Octahedron, Dodecahedron, Icosahedron, Tesseract, Truncated Cube,\n    Truncated Tetrahedron, Ladder, Ring, M\u00f6bius, Cylinder, Spiral, Spiral Torus, and Circulant[10,[2]].\n    Additionally, the function includes adjacency mappings for specific named graphs like\n    Buckyball - Truncated Icosahedral Graph, D30 - Rhombic Triacontahedral Graph, Small Rhombicosidodecahedral Graph,\n    Small Rhombicuboctahedral Graph, Great Rhombicosidodecahedral Graph, Disdyakis Dodecahedral Graph,\n    Deltoidal Icositetrahedral Graph, Icosidodecahedral Graph, Deltoidal Hexecontahedral Graph, Kocohl74,\n    Utility Graph, Errara Graph, and Dragon Curve Blob 6.\n    The adjacency mappings define the connections between nodes in each named graph.\n    The function returns a dictionary\n    containing the named graphs as keys and their corresponding NetworkX graph objects as values.\n    \"\"\"\n\n    graph_atlas = {\n        'Triangle': nx.cycle_graph(3),\n        'Square': nx.cycle_graph(4),\n        'Square Lattice[3,3]': nx.grid_2d_graph(3, 3),\n        'Pentagon': nx.cycle_graph(5),\n        'Hexagon': nx.cycle_graph(6),\n        'Heptagon': nx.cycle_graph(7),\n        'Octagon': nx.cycle_graph(8),\n        'Tetrahedron': nx.tetrahedral_graph(),\n        'Cube': nx.hypercube_graph(3),\n        'Octahedron': nx.octahedral_graph(),\n        'Dodecahedron': nx.dodecahedral_graph(),\n        'Icosahedron': nx.icosahedral_graph(),\n        'Tesseract': nx.hypercube_graph(4),\n        'Hypercube[5]': nx.hypercube_graph(5),\n        'Truncated Cube': nx.truncated_cube_graph(),\n        'Truncated Tetrahedron': nx.truncated_tetrahedron_graph(),\n        'Ladder[16]': nx.ladder_graph(16),\n        'Ladder Ring[16]': ladder_ring_graph(16),\n        'Ladder M\u00f6bius Ring[16]': ladder_mobius_graph(16),\n        'Cylinder[6,8]': cylinder_graph(6, 8),\n        'Spiral[128,8]': spiral_graph(128, 8),\n        'Spiral Torus[128,8]': spiral_torus_graph(128, 8),\n        'Chv\u00e1tal': nx.chvatal_graph(),\n        'Circulant[10,[2]]': nx.circulant_graph(10, [2]),\n        'Desargues': nx.desargues_graph(),\n        'Dorogovtsev-Goltsev-Mendes[4]': nx.dorogovtsev_goltsev_mendes_graph(4),\n        'Frucht': nx.frucht_graph(),\n        'Heawood': nx.heawood_graph(),\n        'Hoffman-Singleton': nx.hoffman_singleton_graph(),\n        # 'Margulis-Gabber-Galil[8]': nx.margulis_gabber_galil_graph(8),\n        'Papus': nx.pappus_graph(),\n        'Petersen': nx.petersen_graph(),\n        'Sedgewick Maze': nx.sedgewick_maze_graph(),\n        'Tutte': nx.tutte_graph(),\n    }\n\n    graph_atlas.update(special_graphs())\n\n    def clean(s: str):\n        # Remove invalid characters\n        s = re.sub('[^0-9a-zA-Z_]', '_', s)\n\n        # Remove leading characters until we find a letter or underscore\n        s = re.sub('^[^a-zA-Z_]+', '', s)\n\n        return s\n\n    for name, g in graph_atlas.items():\n        _type = clean(name).capitalize()\n        nx.set_node_attributes(g, _type, 'type')\n        nx.set_edge_attributes(g, _type, 'type')\n\n    return graph_atlas\n</code></pre>"},{"location":"examples/math/#polygonal-graph","title":"Polygonal Graph","text":"Polygonal GraphDependencies examples/math/polygonal_graph.py<pre><code>import networkx as nx\n\nimport graphinate\n\n# import graphinate.modeling\nfrom graphinate import GraphModel\n\n\ndef polygonal_graph_edges(edges_count: int):\n    for i in range(1, edges_count):\n        yield {'source': i, 'target': i + 1}\n    yield {'source': edges_count, 'target': 1}\n\n\ndef polygonal_graph_model(name: str, number_of_sides: int) -&gt; graphinate.GraphModel:\n    \"\"\"\n    Create a polygonal graph model.\n\n    Args:\n        name (str): The Graph's name.\n        number_of_sides (int): Number of sides in the polygon.\n\n    Returns:\n        GraphModel: A graph model representing a polygonal graph.\n    \"\"\"\n\n    # Define GraphModel\n    graph_model: GraphModel = graphinate.model(name)\n\n    # Register edges supplier function\n    @graph_model.edge()\n    def edge():\n        yield from polygonal_graph_edges(number_of_sides)\n\n    return graph_model\n\n# instantiated here to be used to cli serving\nmodel = polygonal_graph_model(\"Octagonal Graph\", 8)\n\nif __name__ == '__main__':\n\n    # 1. Define Graph Builder\n    builder = graphinate.builders.NetworkxBuilder(model)\n\n    # Then\n    # 2. Build the Graph object\n    graph: nx.Graph = builder.build()\n\n    # Then\n    # 3. Option A - Output to console\n    print(graph)\n\n    # Or\n    # 3. Option B - Output as a plot\n    graphinate.renderers.matplotlib.plot(graph)\n\n    # Alternatively,\n    # 4. Define a GraphQL Builder\n    builder = graphinate.builders.GraphQLBuilder(model)\n\n    schema = builder.build()\n\n    graphinate.graphql.server(schema, port=9077)\n</code></pre> examples/math/requirements.txt<pre><code>graphinate\nnetworkx\n</code></pre>"},{"location":"examples/social/","title":"Social","text":""},{"location":"examples/social/#music-artists","title":"Music Artists","text":"Music ArtistsDependencies examples/social/music_artists.py<pre><code>import logging\nimport operator\nimport pathlib\nfrom functools import reduce\nfrom time import sleep\n\nimport diskcache\nimport musicbrainzngs\n\nimport graphinate\n\n# logging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\ndef initialize_musicbrainz():\n    musicbrainzngs.set_useragent(\n        \"MusicArtistGraph\",\n        \"0.1.0\",\n        \"https://github.com/erivlis/graphinate\"\n    )\n\n\ninitialize_musicbrainz()\n\n\ndef cache_dir():\n    current_script_path = pathlib.Path(__file__).resolve()\n    parent_dir = current_script_path.parent\n    return (parent_dir / 'cache').as_posix()\n\n\ndef music_graph_model(name: str, max_depth: int = 0):\n    graph_model = graphinate.model(f\"{name.capitalize()} Graph\")\n\n    artists_cache = diskcache.Cache(directory=cache_dir(), eviction_policy='none')\n\n    result = musicbrainzngs.search_artists(query=name, strict=True, artist=name)\n    sleep(1)\n    root_artist = result.get('artist-list', [])[0] if result else None\n\n    def artists(parent_artist, artist, depth):\n        logger.info(f\"Current depth: {depth}\")\n        artist_id = artist.get('id')\n        if artist_id not in artists_cache:\n            artists_cache[artist_id] = musicbrainzngs.get_artist_by_id(id=artist_id, includes=['artist-rels']).get(\n                'artist')\n            sleep(0.1)\n\n        artist = artists_cache.get(artist_id)\n\n        yield parent_artist, artist\n\n        if depth &lt; max_depth:\n            related_artist_ids = set()\n            for item in artist.get('artist-relation-list', []):\n                related_artist = item.get('artist')\n                related_artist_id = related_artist.get('id')\n                if related_artist_id not in related_artist_ids:\n                    related_artist_ids.add(related_artist_id)\n                    yield from artists(artist, related_artist, depth + 1)\n\n    def artist_type(value):\n        return value.get('type', '_UNKNOWN_')\n\n    @graph_model.node(artist_type,\n                      key=operator.itemgetter('id'),\n                      label=operator.itemgetter('name'),\n                      multiplicity=graphinate.Multiplicity.FIRST)\n    def node():\n        yielded = set()\n        for a, b in artists(None, root_artist, 0):\n            if a and ((a_id := a.get('id')) not in yielded):\n                yielded.add(a_id)\n                yield a\n            if b and ((b_id := b.get('id')) not in yielded):\n                yielded.add(b_id)\n                yield b\n\n    @graph_model.edge()\n    def edge():\n        for a, b in artists(None, root_artist, 0):\n            if a:\n                yield {'source': a.get('id'), 'target': b.get('id')}\n\n    return graph_model\n\n\nif __name__ == '__main__':\n    from gui import ListboxChooser\n\n    artist_names = [\n        'Alice in Chains',\n        'Beatles',\n        'Caravan',\n        'Charles Mingus',\n        'Dave Brubeck',\n        'Dave Douglas',\n        'David Bowie',\n        'Deep Purple',\n        'Dire Straits',\n        'Emerson, Lake &amp; Palmer',\n        'Foo Fighters',\n        'Frank Zappa',\n        'Genesis',\n        'Gentle Giant',\n        'Herbie Hancock',\n        'Jethro Tull',\n        'John Coltrane',\n        'John Scofield',\n        'John Zorn',\n        'Ken Vandermark',\n        'King Crimson',\n        'Led Zeppelin',\n        'Mahavishnu Orchestra',\n        'Miles Davis',\n        'Nirvana',\n        'Ornette Coleman',\n        'Paul McCartney',\n        'Pearl Jam',\n        'Pink Floyd',\n        'Police',\n        'Porcupine Tree',\n        'Radiohead',\n        'Red Hot Chili Peppers',\n        'Return to Forever',\n        'Rush',\n        'Smashing Pumpkins',\n        'Soft Machine',\n        'Soundgarden',\n        'Stone Temple Pilots',\n        'System of a Down',\n        'Thelonious Monk',\n        'Weather Report',\n        'Wings',\n        'Yes',\n    ]\n\n    listbox_chooser = ListboxChooser('Choose Artist/s', {name: name for name in artist_names})\n\n    models = (music_graph_model(a, 2) for _, a in listbox_chooser.get_choices())\n\n    model = reduce(operator.add, models)\n\n    schema = graphinate.builders.GraphQLBuilder(model).build()\n    graphinate.graphql.server(schema)\n</code></pre> examples/social/requirements.txt<pre><code>diskcache\ngraphinate\nmusicbrainzngs\n</code></pre>"},{"location":"examples/system/","title":"System","text":""},{"location":"examples/system/#processes","title":"Processes","text":"ProcessesDependencies examples/system/processes.py<pre><code>import operator\nfrom collections.abc import Iterable\n\nimport networkx as nx\nimport psutil\n\nimport graphinate\n\n\ndef processes_graph_model():\n    \"\"\"\n    Create a graph model representing processes and their parent-child relationships.\n\n    Returns:\n        GraphModel: A graph model representing processes and their parent-child relationships.\n    \"\"\"\n\n    graph_model = graphinate.model(\"Processes Graph\")\n\n    def processes() -&gt; Iterable[psutil.Process]:\n        for pid in psutil.pids():\n            if psutil.pid_exists(pid):\n                yield psutil.Process(pid)\n\n    processes_list = [\n        {\n            'pid': p.pid,\n            'name': p.name(),\n            'parent_pid': p.parent().pid if p.parent() else None\n        }\n        for p in processes()\n    ]\n\n    @graph_model.node(key=operator.itemgetter('pid'), label=operator.itemgetter('name'))\n    def process():\n        yield from processes_list\n\n    @graph_model.edge()\n    def edge():\n        for p in processes_list:\n            parent_pid = p.get('parent_pid')\n            if parent_pid:\n                yield {'source': p.get('pid'), 'target': parent_pid}\n\n    return graph_model\n\n\nmodel = processes_graph_model()\n\nif __name__ == '__main__':\n    # 1. Define Graph Builder\n    builder = graphinate.builders.NetworkxBuilder(model=model)\n\n    # Then\n    # 2. Build the Graph object\n    graph: nx.Graph = builder.build()\n\n    # Then\n    # 3. Option A - Output to console\n    print(graph)\n\n    # Or\n    # 3. Option B - Output as a plot\n    graphinate.materializers.plot(graph)\n</code></pre> examples/system/requirements.txt<pre><code>graphinate\nmagika\npsutil\n</code></pre>"},{"location":"examples/web/","title":"Web","text":""},{"location":"examples/web/#web-page-links","title":"Web Page Links","text":"Web Page LinksDependenciesPlot examples/web/page_links.py<pre><code>from urllib.parse import urlparse\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom loguru import logger\n\nimport graphinate\n\nDEFAULT_MAX_DEPTH = 0\n\n\ndef page_links_graph_model(max_depth: int = DEFAULT_MAX_DEPTH):\n    \"\"\"\n    Create a graph model based on page links.\n\n    Args:\n        max_depth (int, optional): The maximum depth to crawl for page links. Defaults to DEFAULT_MAX_DEPTH.\n\n    Returns:\n        GraphModel: A graph model representing the page links.\n    \"\"\"\n\n    def _links(url: str, depth=0, **kwargs):\n        reqs = requests.get(url)\n        logger.debug('Analyzing Page: {url}')\n        soup = BeautifulSoup(reqs.text, 'lxml')\n        logger.debug('Done Analyzing Page: {url}')\n        for link in soup.find_all('a', href=True):\n            child_url = link.get('href')\n\n            if child_url.startswith('javascript:'):  # Skip JavaScript links\n                continue\n\n            if child_url.startswith('//'):  # Handle protocol-relative URLs\n                child_url = f\"https:{child_url}\"\n\n            if not bool(urlparse(child_url).netloc):  # Skip relative URLs\n                # child_url = urljoin(url, child_url)\n                continue\n\n            if not child_url.startswith('http'):  # Skip non-HTTP URLs\n                continue\n\n            yield {'source': url, 'target': child_url}\n            if depth &lt; max_depth:\n                yield from _links(child_url, depth=depth + 1, **kwargs)\n\n    graph_model = graphinate.model(name='Web')\n\n    @graph_model.edge()\n    def link(url, **kwargs):\n        yield from _links(url, **kwargs)\n\n    return graph_model\n\n\nif __name__ == '__main__':\n    model = page_links_graph_model(1)\n\n    params = {\n        # 'url': 'https://github.com/erivlis/graphinate'\n        'url': 'https://erivlis.github.io/graphinate/'\n    }\n\n    builder = graphinate.builders.GraphQLBuilder(model, graph_type=graphinate.GraphType.DiGraph)\n    schema = builder.build(default_node_attributes={'type': 'url'}, **params)\n    graphinate.graphql.server(schema)\n</code></pre> examples/web/requirements.txt<pre><code>beautifulsoup4\nloguru\nlxml\nrequests\n</code></pre>"},{"location":"examples/web/#html-dom","title":"HTML DOM","text":"HTML DOMDependencies examples/web/html_dom.py<pre><code>import base64\n\nimport requests\nfrom bs4 import BeautifulSoup, Tag\n\nimport graphinate\n\n\ndef load_html_from_url(url=\"https://www.google.com\"):\n    response = requests.get(url)\n    return response.text\n\n\ndef load_html(file_path):\n    with open(file_path) as file:\n        return file.read()\n\n\ndef html_dom_graph_model(html_content):\n    graph_model = graphinate.model(name=\"HTML DOM Graph\")\n    soup = BeautifulSoup(html_content, 'html.parser')\n\n    def node_type(tag: Tag):\n        return tag.name.strip('[]')\n\n    def node_key(tag: Tag):\n        return str((tag.sourceline, tag.sourcepos)) if isinstance(tag, Tag) else base64.b64encode(\n            tag.encode()).decode()\n\n    def node_label(tag: Tag):\n        return str(tag)\n\n    @graph_model.node(node_type, key=node_key, label=node_label)\n    def html_node():\n        for tag in soup.descendants:\n            if tag.name is not None:\n                yield tag\n\n    @graph_model.edge()\n    def contains():\n        for tag in soup.descendants:\n            if tag.name is not None:\n                for child in tag.children:\n                    if child.name is not None:\n                        yield {\n                            'source': node_key(tag),\n                            'target': node_key(child)\n                        }\n\n    return graph_model\n\n\nif __name__ == '__main__':\n    html_content = load_html_from_url()\n    dom_model = html_dom_graph_model(html_content)\n    schema = graphinate.builders.GraphQLBuilder(dom_model).build()\n    graphinate.graphql.server(schema)\n</code></pre> examples/web/requirements.txt<pre><code>beautifulsoup4\nloguru\nlxml\nrequests\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>graphinate<ul> <li>builders</li> <li>modeling</li> <li>renderers<ul> <li>graphql</li> <li>matplotlib</li> </ul> </li> <li>typing</li> </ul> </li> </ul>"},{"location":"reference/graphinate/","title":"Index","text":""},{"location":"reference/graphinate/#graphinate-classes","title":"Classes","text":""},{"location":"reference/graphinate/#graphinate.GraphModel","title":"<code>GraphModel</code>","text":"<p>A Graph Model</p> <p>Used to declaratively register Edge and/or Node data supplier functions by using decorators.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>the archetype name for Graphs generated based on the GraphModel.</p> required"},{"location":"reference/graphinate/#graphinate.GraphModel-attributes","title":"Attributes","text":""},{"location":"reference/graphinate/#graphinate.GraphModel.edge_generators","title":"<code>edge_generators</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <p>Edge generator functions for Edge Types</p>"},{"location":"reference/graphinate/#graphinate.GraphModel.node_models","title":"<code>node_models</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>dict[NodeTypeAbsoluteId, list[NodeModel]]</code> <p>NodeModel for Node Types. Key values are NodeTypeAbsoluteId.</p>"},{"location":"reference/graphinate/#graphinate.GraphModel.node_types","title":"<code>node_types</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>set[str]</code> <p>Node Types</p>"},{"location":"reference/graphinate/#graphinate.GraphModel-functions","title":"Functions","text":""},{"location":"reference/graphinate/#graphinate.GraphModel.edge","title":"<code>edge(type_=None, source='source', target='target', label=str, value=None, weight=1.0)</code>","text":"<p>Decorator to Register a generator of edge payloads as a source of Graph Edges.  It creates an Edge generator function.</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>Optional[Extractor]</code> <p>Optional source for the Edge Type. Defaults to use Generator function    name as the Edge Type.</p> <code>None</code> <code>source</code> <code>Extractor</code> <p>Source for edge source Node ID.</p> <code>'source'</code> <code>target</code> <code>Extractor</code> <p>Source for edge target Node ID.</p> <code>'target'</code> <code>label</code> <code>Optional[Extractor]</code> <p>Source for edge label.</p> <code>str</code> <code>value</code> <code>Optional[Extractor]</code> <p>Source for edge value.</p> <code>None</code> <code>weight</code> <code>Union[float, Callable[[Any], float]]</code> <p>Source for edge weight.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>Callable[[Items], None]</code> <p>None.</p>"},{"location":"reference/graphinate/#graphinate.GraphModel.node","title":"<code>node(type_=None, parent_type=UniverseNode, key=None, value=None, label=None, unique=True, multiplicity=Multiplicity.ALL)</code>","text":"<p>Decorator to Register a Generator of node payloads as a source for Graph Nodes. It creates a NodeModel object.</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>Optional[Extractor]</code> <p>Optional source for the Node Type. Defaults to use Generator function    name as the Node Type.</p> <code>None</code> <code>parent_type</code> <code>Optional[str]</code> <p>Optional parent Node Type. Defaults to UNIVERSE_NODE</p> <code>UniverseNode</code> <code>key</code> <code>Optional[Extractor]</code> <p>Optional source for Node IDs. Defaults to use the complete Node payload  as Node ID.</p> <code>None</code> <code>value</code> <code>Optional[Extractor]</code> <p>Optional source for Node value field. Defaults to use the complete    Node payload as Node ID.</p> <code>None</code> <code>label</code> <code>Optional[Extractor]</code> <p>Optional source for Node label field. Defaults to use a 'str'    representation of the complete Node payload.</p> <code>None</code> <code>unique</code> <code>bool</code> <p>is the Node universally unique. Defaults to True.</p> <code>True</code> <code>multiplicity</code> <code>Multiplicity</code> <p>Multiplicity of the Node. Defaults to ALL.</p> <code>ALL</code> <p>Returns:</p> Type Description <code>Callable[[Items], None]</code> <p>None</p>"},{"location":"reference/graphinate/#graphinate.GraphModel.node_children_types","title":"<code>node_children_types(_type=UniverseNode)</code>","text":"<p>Children Node Types for given input Node Type</p> <p>Parameters:</p> Name Type Description Default <code>_type</code> <code>str</code> <p>Node Type. Default value is UNIVERSE_NODE.</p> <code>UniverseNode</code> <p>Returns:</p> Type Description <code>dict[str, list[str]]</code> <p>List of children Node Types.</p>"},{"location":"reference/graphinate/#graphinate.GraphModel.rectify","title":"<code>rectify(_type=None, parent_type=UniverseNode, key=None, value=None, label=None)</code>","text":"<p>Rectify the model. Add a default NodeModel in case of having just edge supplier/s and no node supplier/s.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"reference/graphinate/#graphinate.GraphType","title":"<code>GraphType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Graph Types</p> <p>The choice of graph class depends on the structure of the graph you want to represent.</p> Graph Type Type Self-loops allowed Parallel edges allowed Graph Undirected Yes No DiGraph Directed Yes No MultiGraph Undirected Yes Yes MultiDiGraph Directed Yes Yes <p>See more here: NetworkX Reference</p>"},{"location":"reference/graphinate/#graphinate-functions","title":"Functions","text":""},{"location":"reference/graphinate/#graphinate.build","title":"<code>build(builder_cls, graph_model, graph_type=GraphType.Graph, default_node_attributes=None, **kwargs)</code>","text":"<p>Build a graph from a graph model</p> <p>Parameters:</p> Name Type Description Default <code>builder_cls</code> <code>type[Builder]</code> <p>builder class type</p> required <code>graph_model</code> <code>GraphModel</code> <p>a GraphModel instance</p> required <code>graph_type</code> <code>GraphType</code> <p>type of the generated graph</p> <code>Graph</code> <code>default_node_attributes</code> <code>Optional[Mapping]</code> <p>default node attributes</p> <code>None</code> <code>**kwargs</code> <p>node id values</p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>Graph data structure</p>"},{"location":"reference/graphinate/#graphinate.model","title":"<code>model(name)</code>","text":"<p>Create a graph model</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>model name</p> required <p>Returns:</p> Type Description <p>GraphModel</p>"},{"location":"reference/graphinate/builders/","title":"builders","text":"<p>Builder classes that generate graph data structures from a GraphModel</p> <p>Attributes:</p> Name Type Description <code>GraphRepresentation</code> <code>GraphRepresentation</code> <p>GraphRepresentation Type</p>"},{"location":"reference/graphinate/builders/#graphinate.builders-classes","title":"Classes","text":""},{"location":"reference/graphinate/builders/#graphinate.builders.Builder","title":"<code>Builder</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Builder abstract base class</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.Builder-functions","title":"Functions","text":""},{"location":"reference/graphinate/builders/#graphinate.builders.Builder.build","title":"<code>build(**kwargs)</code>","text":"<p>Build a graph</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>GraphRepresentation</code> <p>Any</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.D3Builder","title":"<code>D3Builder</code>","text":"<p>               Bases: <code>NetworkxBuilder</code></p> <p>Build a D3 Graph</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.D3Builder-functions","title":"Functions","text":""},{"location":"reference/graphinate/builders/#graphinate.builders.D3Builder.build","title":"<code>build(values_format='python', **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>values_format</code> <code>Literal['json', 'python']</code> <p>Literal['python', 'json'] - The format of the values</p> <code>'python'</code> <code>**kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>GraphRepresentation</code> <p>D3 Graph</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.GraphQLBuilder","title":"<code>GraphQLBuilder</code>","text":"<p>               Bases: <code>NetworkxBuilder</code></p> <p>Builds a GraphQL Schema</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.GraphQLBuilder-functions","title":"Functions","text":""},{"location":"reference/graphinate/builders/#graphinate.builders.GraphQLBuilder.build","title":"<code>build(**kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>GraphRepresentation</code> <p>Strawberry GraphQL Schema</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.GraphType","title":"<code>GraphType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Graph Types</p> <p>The choice of graph class depends on the structure of the graph you want to represent.</p> Graph Type Type Self-loops allowed Parallel edges allowed Graph Undirected Yes No DiGraph Directed Yes No MultiGraph Undirected Yes Yes MultiDiGraph Directed Yes Yes <p>See more here: NetworkX Reference</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.MermaidBuilder","title":"<code>MermaidBuilder</code>","text":"<p>               Bases: <code>NetworkxBuilder</code></p> <p>Build a Mermaid Graph</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.MermaidBuilder-functions","title":"Functions","text":""},{"location":"reference/graphinate/builders/#graphinate.builders.MermaidBuilder.build","title":"<code>build(orientation=nxm.DiagramOrientation.LEFT_RIGHT, node_shape=nxm.DiagramNodeShape.DEFAULT, title=None, with_edge_labels=False, **kwargs)</code>","text":"<p>Build a Mermaid Graph</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <p>Orientation, optional The orientation of the graph, by default Orientation.LEFT_RIGHT.</p> <code>LEFT_RIGHT</code> <code>node_shape</code> <p>NodeShape, optional The shape of the nodes, by default NodeShape.DEFAULT.</p> <code>DEFAULT</code> <code>title</code> <code>str | None</code> <p>str, optional The title of the graph (default: None). If None, the graph name will be used if available. Supplying and empty string will remove the title.</p> <code>None</code> <code>with_edge_labels</code> <code>bool</code> <p>Whether to include edge labels, by default False.</p> <code>False</code> <code>**kwargs</code> <p>additional inputs to the node and edge generator functions</p> <code>{}</code> <p>Returns:</p> Type Description <code>MermaidDiagram</code> <p>Mermaid Graph</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.NetworkxBuilder","title":"<code>NetworkxBuilder</code>","text":"<p>               Bases: <code>Builder</code></p> <p>Build a NetworkX Graph</p>"},{"location":"reference/graphinate/builders/#graphinate.builders.NetworkxBuilder-functions","title":"Functions","text":""},{"location":"reference/graphinate/builders/#graphinate.builders.NetworkxBuilder.build","title":"<code>build(**kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>GraphRepresentation</code> <p>NetworkX Graph</p>"},{"location":"reference/graphinate/builders/#graphinate.builders-functions","title":"Functions","text":""},{"location":"reference/graphinate/builders/#graphinate.builders.build","title":"<code>build(builder_cls, graph_model, graph_type=GraphType.Graph, default_node_attributes=None, **kwargs)</code>","text":"<p>Build a graph from a graph model</p> <p>Parameters:</p> Name Type Description Default <code>builder_cls</code> <code>type[Builder]</code> <p>builder class type</p> required <code>graph_model</code> <code>GraphModel</code> <p>a GraphModel instance</p> required <code>graph_type</code> <code>GraphType</code> <p>type of the generated graph</p> <code>Graph</code> <code>default_node_attributes</code> <code>Optional[Mapping]</code> <p>default node attributes</p> <code>None</code> <code>**kwargs</code> <p>node id values</p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>Graph data structure</p>"},{"location":"reference/graphinate/modeling/","title":"modeling","text":""},{"location":"reference/graphinate/modeling/#graphinate.modeling-classes","title":"Classes","text":""},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel","title":"<code>GraphModel</code>","text":"<p>A Graph Model</p> <p>Used to declaratively register Edge and/or Node data supplier functions by using decorators.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>the archetype name for Graphs generated based on the GraphModel.</p> required"},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel-attributes","title":"Attributes","text":""},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel.edge_generators","title":"<code>edge_generators</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <p>Edge generator functions for Edge Types</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel.node_models","title":"<code>node_models</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>dict[NodeTypeAbsoluteId, list[NodeModel]]</code> <p>NodeModel for Node Types. Key values are NodeTypeAbsoluteId.</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel.node_types","title":"<code>node_types</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>set[str]</code> <p>Node Types</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel-functions","title":"Functions","text":""},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel.edge","title":"<code>edge(type_=None, source='source', target='target', label=str, value=None, weight=1.0)</code>","text":"<p>Decorator to Register a generator of edge payloads as a source of Graph Edges.  It creates an Edge generator function.</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>Optional[Extractor]</code> <p>Optional source for the Edge Type. Defaults to use Generator function    name as the Edge Type.</p> <code>None</code> <code>source</code> <code>Extractor</code> <p>Source for edge source Node ID.</p> <code>'source'</code> <code>target</code> <code>Extractor</code> <p>Source for edge target Node ID.</p> <code>'target'</code> <code>label</code> <code>Optional[Extractor]</code> <p>Source for edge label.</p> <code>str</code> <code>value</code> <code>Optional[Extractor]</code> <p>Source for edge value.</p> <code>None</code> <code>weight</code> <code>Union[float, Callable[[Any], float]]</code> <p>Source for edge weight.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>Callable[[Items], None]</code> <p>None.</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel.node","title":"<code>node(type_=None, parent_type=UniverseNode, key=None, value=None, label=None, unique=True, multiplicity=Multiplicity.ALL)</code>","text":"<p>Decorator to Register a Generator of node payloads as a source for Graph Nodes. It creates a NodeModel object.</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>Optional[Extractor]</code> <p>Optional source for the Node Type. Defaults to use Generator function    name as the Node Type.</p> <code>None</code> <code>parent_type</code> <code>Optional[str]</code> <p>Optional parent Node Type. Defaults to UNIVERSE_NODE</p> <code>UniverseNode</code> <code>key</code> <code>Optional[Extractor]</code> <p>Optional source for Node IDs. Defaults to use the complete Node payload  as Node ID.</p> <code>None</code> <code>value</code> <code>Optional[Extractor]</code> <p>Optional source for Node value field. Defaults to use the complete    Node payload as Node ID.</p> <code>None</code> <code>label</code> <code>Optional[Extractor]</code> <p>Optional source for Node label field. Defaults to use a 'str'    representation of the complete Node payload.</p> <code>None</code> <code>unique</code> <code>bool</code> <p>is the Node universally unique. Defaults to True.</p> <code>True</code> <code>multiplicity</code> <code>Multiplicity</code> <p>Multiplicity of the Node. Defaults to ALL.</p> <code>ALL</code> <p>Returns:</p> Type Description <code>Callable[[Items], None]</code> <p>None</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel.node_children_types","title":"<code>node_children_types(_type=UniverseNode)</code>","text":"<p>Children Node Types for given input Node Type</p> <p>Parameters:</p> Name Type Description Default <code>_type</code> <code>str</code> <p>Node Type. Default value is UNIVERSE_NODE.</p> <code>UniverseNode</code> <p>Returns:</p> Type Description <code>dict[str, list[str]]</code> <p>List of children Node Types.</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.GraphModel.rectify","title":"<code>rectify(_type=None, parent_type=UniverseNode, key=None, value=None, label=None)</code>","text":"<p>Rectify the model. Add a default NodeModel in case of having just edge supplier/s and no node supplier/s.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.NodeModel","title":"<code>NodeModel</code>  <code>dataclass</code>","text":"<p>Represents a Node Model</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>the type of the Node.</p> required <code>parent_type</code> <code>Optional[str]</code> <p>the type of the node's parent. Defaults to UniverseNode.</p> <code>UniverseNode</code> <code>parameters</code> <code>set[str] | None</code> <p>parameters of the Node. Defaults to None.</p> <code>None</code> <code>label</code> <code>Callable[[Any], str | None]</code> <p>label source. Defaults to None.</p> <code>None</code> <code>uniqueness</code> <code>bool</code> <p>is the Node universally unique. Defaults to True.</p> <code>True</code> <code>multiplicity</code> <code>Multiplicity</code> <p>Multiplicity of the Node. Defaults to ALL.</p> <code>ALL</code> <code>generator</code> <code>Callable[[], Iterable[Node]] | None</code> <p>Nodes generator method. Defaults to None.</p> <code>None</code> Properties <p>absolute_id: return the NodeModel absolute_id.</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling-functions","title":"Functions","text":""},{"location":"reference/graphinate/modeling/#graphinate.modeling.element","title":"<code>element(element_type, field_names=None)</code>","text":"<p>Graph Element Supplier Callable</p> <p>Parameters:</p> Name Type Description Default <code>element_type</code> <code>Optional[str]</code> required <code>field_names</code> <code>Optional[Iterable[str]]</code> <code>None</code> <p>Returns:</p> Type Description <code>Callable[[...], Element]</code> <p>Element Supplier Callable</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.elements","title":"<code>elements(iterable, element_type=None, **getters)</code>","text":"<p>Abstract Generator of Graph elements (nodes or edges)</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable[Any]</code> <p>source of payload</p> required <code>element_type</code> <code>Optional[Extractor]</code> <p>Optional[Extractor] source of type of the element. Defaults to Element Type name.</p> <code>None</code> <code>getters</code> <code>Extractor</code> <p>Extractor node field sources</p> <code>{}</code> <p>Returns:</p> Type Description <code>Iterable[Element]</code> <p>Iterable of Elements.</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.extractor","title":"<code>extractor(obj, key=None)</code>","text":"<p>Extract data item from Element</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> required <code>key</code> <code>Optional[Extractor]</code> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Element data item</p>"},{"location":"reference/graphinate/modeling/#graphinate.modeling.model","title":"<code>model(name)</code>","text":"<p>Create a graph model</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>model name</p> required <p>Returns:</p> Type Description <p>GraphModel</p>"},{"location":"reference/graphinate/typing/","title":"typing","text":"<p>Typing Module</p> <p>Attributes:</p> Name Type Description <code>Node</code> <code>Node</code> <p>Node Type</p> <code>Edge</code> <code>Edge</code> <p>Edge Type</p> <code>Element</code> <code>Element</code> <p>Element Type</p> <code>Extractor</code> <code>Extractor</code> <p>Source of data for an Element</p>"},{"location":"reference/graphinate/renderers/","title":"Index","text":""},{"location":"reference/graphinate/renderers/graphql/","title":"graphql","text":""},{"location":"reference/graphinate/renderers/graphql/#graphinate.renderers.graphql-functions","title":"Functions","text":""},{"location":"reference/graphinate/renderers/graphql/#graphinate.renderers.graphql.server","title":"<code>server(graphql_schema, port=DEFAULT_PORT, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>graphql_schema</code> <code>Schema</code> <p>The Strawberry GraphQL schema.</p> required <code>port</code> <code>int</code> <p>The port number to run the server on. Defaults to 8072.</p> <code>DEFAULT_PORT</code> <p>Returns:</p>"},{"location":"reference/graphinate/renderers/matplotlib/","title":"matplotlib","text":""},{"location":"reference/graphinate/renderers/matplotlib/#graphinate.renderers.matplotlib-functions","title":"Functions","text":""},{"location":"reference/graphinate/renderers/matplotlib/#graphinate.renderers.matplotlib.draw","title":"<code>draw(graph, with_node_labels=True, with_edge_labels=False, **kwargs)</code>","text":"<p>Draws the given networkx graph with optional node and edge labels.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Graph</code> <p>The input graph to be drawn.</p> required <code>with_node_labels</code> <code>bool</code> <p>Whether to display node labels. Default is True.</p> <code>True</code> <code>with_edge_labels</code> <code>bool</code> <p>Whether to display edge labels. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"reference/graphinate/renderers/matplotlib/#graphinate.renderers.matplotlib.plot","title":"<code>plot(graph, with_node_labels=True, with_edge_labels=False, **kwargs)</code>","text":"<p>Plots the given networkx graph with optional node and edge labels.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Graph</code> <p>The input graph to be plotted.</p> required <code>with_node_labels</code> <code>bool</code> <p>Whether to display node labels. Default is True.</p> <code>True</code> <code>with_edge_labels</code> <code>bool</code> <p>Whether to display edge labels. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"usage/cli/","title":"CLI","text":""},{"location":"usage/cli/#commands","title":"Commands","text":"<pre><code>Usage: python -m graphinate [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  save\n  server\n</code></pre>"},{"location":"usage/cli/#save","title":"Save","text":"<pre><code>Usage: python -m graphinate save [OPTIONS]\n\nOptions:\n  -m, --model MODEL  A GraphModel instance reference {module-\n                     name}:{GraphModel-instance-variable-name} For example,\n                     given var `model=GraphModel()` defined in app.py file,\n                     then the reference should be app:model\n  --help             Show this message and exit.\n</code></pre>"},{"location":"usage/cli/#server","title":"Server","text":"<p>Tip</p> <p>requires the <code>server</code> extra to be installed.</p> <pre><code>pip install graphinate[server]\n</code></pre> <pre><code>Usage: python -m graphinate server [OPTIONS]\n\nOptions:\n  -m, --model MODEL   A GraphModel instance reference {module-\n                      name}:{GraphModel-instance-variable-name} For example,\n                      given var `model=GraphModel()` defined in app.py file,\n                      then the  reference should be app:model\n  -p, --port INTEGER  Port number.\n  --help              Show this message and exit.\n</code></pre>"},{"location":"usage/lib/","title":"Library","text":""},{"location":"usage/lib/#top-level-functions","title":"Top level Functions","text":"<ul> <li> <p><code>model</code> -   Create a <code>GraphModel</code></p> </li> <li> <p><code>build</code> -   Generate a <code>GraphRepresentation</code> from a  <code>GraphModel</code></p> </li> </ul>"},{"location":"usage/lib/#sdk","title":"SDK","text":""},{"location":"usage/lib/#model","title":"Model","text":"<ul> <li> <p><code>graphinate.GraphModel</code></p> <p>The <code>GraphModel</code> Class which is used to declaratively register, Edge and/or Node data supplier functions.   Using the <code>GraphModel.node()</code>   and <code>GraphMode.edge()</code> decorators.</p> </li> </ul>"},{"location":"usage/lib/#builders","title":"Builders","text":"<ul> <li> <p><code>graphinate.builders.NetworkxBuilder</code> -   Generates a NetworkX Graph instance.</p> </li> <li> <p><code>graphinate.builders.D3Builder</code> - Generates a D3   Graph instance (i.e. a Dict).</p> </li> <li> <p><code>graphinate.builders.GraphQLBuilder</code> - Generates   a Strawberry GraphQL Schema instance</p> </li> <li> <p><code>graphinate.builders.MermaidBuilder</code> - Generates   a Mermaid Diagram</p> </li> </ul>"}]}